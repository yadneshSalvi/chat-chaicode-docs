{
    "https://docs.chaicode.com/youtube/chai-aur-c/control-flow/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#_top)\n  * [ If Statement ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#if-statement)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#task)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#solution)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#going-through-the-code)\n  * [ If-Else Statement ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#if-else-statement)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#task-1)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#solution-1)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#going-through-the-code-1)\n  * [ Nested If-Else ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#nested-if-else)\n    * [ Challenge ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#challenge)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#solution-2)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#going-through-the-code-2)\n  * [ Switch Case ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#switch-case)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#task-2)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#solution-3)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#going-through-the-code-3)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/#summary)\n\n\n# Control Flow\nIn this chapter, we will learn about control flow in C++. We will start by learning about conditional statements and how to use them.\nHere we are using task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\n## If Statement\nIf statement is used to check if a condition is true or false. If the condition is true, then the code inside the if statement is executed. If the condition is false, then the code inside the if statement is not executed.\n### Task\nWrite a program that checks if the user wants to order Green Tea. If the user types \u201cGreen Tea,\u201d the program should confirm their order.\n### Solution\nif.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring teaOrder;\ncout <<\"Enter your tea order\";\ngetline(cin, teaOrder);\nif(teaOrder ==\"Green Tea\"){\ncout <<\"You have ordered Green Tea\"<< endl;\n}\nreturn0;\n}\n\n```\n\n### Going through the code\n  * The `string teaOrder;` line declares a variable named `teaOrder` of type `string` and does not assign a value to it.\n  * The `cout << \"Enter your tea order\";` line prints the string \u201cEnter your tea order\u201d to the console.\n  * The `getline(cin, teaOrder);` line reads a line of input from the console and assigns it to the `teaOrder` variable.\n  * The `if(teaOrder == \"Green Tea\"){` line starts an `if` statement that checks if the `teaOrder` variable is equal to the string \u201cGreen Tea\u201d.\n  * The `cout << \"You have ordered Green Tea\" << endl;` line prints the string \u201cYou have ordered Green Tea\u201d followed by a newline character to the console.\n  * The `}` line ends the `if` statement.\n  * `return 0;` line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\n\n## If-Else Statement\nIf-else statement is used to check if a condition is true or false. If the condition is true, then the code inside the if statement is executed. If the condition is false, then the code inside the else statement is executed.\n### Task\nWrite a program that checks if a tea shop is open. If the current hour (input by the user) is between 8 AM and 6 PM, the shop is open; otherwise, it\u2019s closed.\n### Solution\nif-else.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint hour;\ncout <<\"Enter the current hour (0-23): \";\ncin >> hour;\nif(hour >=8&& hour <=18){\ncout <<\"Tea shop is OPEN!\"<< endl;\n}else{\ncout <<\"Tea shop is CLOSED!\"<< endl;\n}\nreturn0;\n}\n\n```\n\n### Going through the code\n  * The `int hour;` line declares a variable named `hour` of type `int` and does not assign a value to it.\n  * The `cout << \"Enter the current hour (0-23): \";` line prints the string \u201cEnter the current hour (0-23): \u201d to the console.\n  * The `cin >> hour;` line reads an integer from the console and assigns it to the `hour` variable.\n  * The `if(hour >= 8 && hour <= 18) {` line starts an `if` statement that checks if the `hour` variable is greater than or equal to 8 and less than or equal to 18.\n  * The `cout << \"Tea shop is OPEN!\" << endl;` line prints the string \u201cTea shop is OPEN!\u201d followed by a newline character to the console.\n  * The `} else {` line starts an `else` block that is executed if the `if` statement is false.\n  * The `cout << \"Tea shop is CLOSED!\" << endl;` line prints the string \u201cTea shop is CLOSED!\u201d followed by a newline character to the console.\n  * The `}` line ends the `if` statement.\n  * `return 0;` line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\n\n## Nested If-Else\nNested if-else consists of an if statement inside an else statement.\n### Challenge\nA tea shop offers discounts based on the number of tea cups ordered. Write a program that checks the number of cups ordered and applies a discount:\n  * More than 20 cups: 20% discount\n  * Between 10 and 20 cups: 10% discount\n  * Less than 10 cups: No discount\n\n\n### Solution\nnested-if-else.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint cups;\ndouble pricePerCup =2.5, totalPrice, discount;\ncout <<\"Enter the number of tea cups\";\ncin >> cups;\ntotalPrice = pricePerCup * cups;\nif(cups >20){\ndiscount =0.20;\n}elseif(cups >=10&& cups <=20){\ndiscount =0.10;\n}else{\ndiscount =0;\n}\ntotalPrice -=(totalPrice * discount);\ncout <<\"Total price after discount is: \"<< totalPrice << endl;\nreturn0;\n}\n\n```\n\n### Going through the code\n  * The `int teaBags;` line declares a variable named `teaBags` of type `int` and does not assign a value to it.\n  * The `double pricePerBag, totalPrice, discount;` line declares three variables named `pricePerBag`, `totalPrice`, and `discount` of type `double` and does not assign a value to them.\n  * The `cout << \"Enter the number of tea bags you have: \";` line prints the string \u201cEnter the number of tea bags you have: \u201d to the console.\n  * The `cin >> teaBags;` line reads an integer from the console and assigns it to the `teaBags` variable.\n  * The `if (teaBags > 20) {` line starts an `if` statement that checks if the `teaBags` variable is greater than `20`.\n  * The `discount = 0.20;` line assigns the value `0.20` to the `discount` variable.\n  * The `} else if (teaBags >= 10 && teaBags <= 20) {` line starts an `else if` block that is executed if the `if` statement is false.\n  * The `discount = 0.10;` line assigns the value `0.10` to the `discount` variable.\n  * The `} else {` line starts an `else` block that is executed if the `if` statement is false.\n  * The `discount = 0;` line assigns the value `0` to the `discount` variable.\n  * The `}` line ends the `if` statement.\n  * The `totalPrice = pricePerBag * teaBags;` line calculates the total price by multiplying the `teaBags` and `pricePerBag` variables.\n  * The `totalPrice -= (totalPrice * discount);` line calculates the discounted price by subtracting the `totalPrice` multiplied by `discount` from the `totalPrice` variable.\n  * The `cout << \"Total price after discount is: \" << totalPrice << endl;` line prints the string \u201cTotal price after discount is: \u201d followed by the value of the `totalPrice` variable to the console.\n  * `return 0;` line indicates that the program has finished executing and returns a value of 0.\n\n\n## Switch Case\nSwitch statement is used to check if a variable matches a specific value. If the variable matches the value, then the code inside the case statement is executed. If the variable does not match the value, then the code inside the default statement is executed.\nIt is useful when you have multiple options and want to execute different code based on the value of the variable.\n### Task\nWrite a program that lets the user select a tea type from a menu. Use a switch statement to display the price based on the selected tea:\n  * Green Tea: $2\n  * Black Tea: $3\n  * Oolong Tea: $4\n\n\n### Solution\nswitch-case.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint choice;\ndouble price;\ncout <<\"Select your tea\\n\";\ncout <<\"1. Green Tea\\n\";\ncout <<\"2. Lemon Tea\\n\";\ncout <<\"3. Oolong Tea\\n\";\ncout <<\"Enter your choice in number: \\n\";\ncin >> choice;\nswitch(choice){\ncase1:\nprice =2.0;\ncout <<\"You selected Green Tea. Price: \"<< price << endl;\nbreak;\ncase2:\nprice =3.0;\ncout <<\"You selected Lemon Tea. Price: \"<< price << endl;\nbreak;\ncase3:\nprice =4.0;\ncout <<\"You selected Oolong Tea. Price: \"<< price << endl;\nbreak;\ndefault:\ncout <<\"Invalid choice\"<< endl;\nbreak;\n}\nreturn0;\n}\n\n```\n\n### Going through the code\n  * The `int choice;` line declares a variable named `choice` of type `int` and does not assign a value to it.\n  * The `double price;` line declares a variable named `price` of type `double` and does not assign a value to it.\n  * The `cout << \"Select your tea\\n\";` line prints the string \u201cSelect your tea\\n\u201d to the console.\n  * The `cout << \"1. Green Tea\\n\";` line prints the string \u201c1. Green Tea\\n\u201d to the console.\n  * The `cout << \"2. Lemon Tea\\n\";` line prints the string \u201c2. Lemon Tea\\n\u201d to the console.\n  * The `cout << \"3. Oolong Tea\\n\";` line prints the string \u201c3. Oolong Tea\\n\u201d to the console.\n  * The `cout << \"Enter your choice in number: \\n\";` line prints the string \u201cEnter your choice in number: \\n\u201d to the console.\n  * The `cin >> choice;` line reads an integer from the console and assigns it to the `choice` variable.\n  * The `switch(choice){` line starts a `switch` statement that checks the value of the `choice` variable.\n  * The `case 1:` line starts a `case` block that is executed if the `choice` variable is equal to `1`.\n  * The `price = 2.0;` line assigns the value `2.0` to the `price` variable.\n  * The `cout << \"You selected Green Tea. Price: \"<< price << endl;` line prints the string \u201cYou selected Green Tea. Price: \u201d followed by the value of the `price` variable to the console.\n  * The `break;` line ends the `case` block.\n  * The `case 2:` line starts a `case` block that is executed if the `choice` variable is equal to `2`.\n  * The `price = 3.0;` line assigns the value `3.0` to the `price` variable.\n  * The `cout << \"You selected Lemon Tea. Price: \"<< price << endl;` line prints the string \u201cYou selected Lemon Tea. Price: \u201d followed by the value of the `price` variable to the console.\n  * The `break;` line ends the `case` block.\n  * The `case 3:` line starts a `case` block that is executed if the `choice` variable is equal to `3`.\n  * The `price = 4.0;` line assigns the value `4.0` to the `price` variable.\n  * The `cout << \"You selected Black Tea. Price: \"<< price << endl;` line prints the string \u201cYou selected Black Tea. Price: \u201d followed by the value of the `price` variable to the console.\n  * The `break;` line ends the `case` block.\n  * The `default:` line starts a `default` block that is executed if the `choice` variable is not equal to `1`, `2`, or `3`.\n  * The `cout << \"Invalid choice\" << endl;` line prints the string \u201cInvalid choice\u201d followed by a newline character to the console.\n  * The `break;` line ends the `default` block.\n  * The `}` line ends the `switch` statement.\n  * `return 0;` line indicates that the program has finished executing and returns a value of 0.\n\n\n## Summary\nIn this chapter, we have learned about conditional statements and how to use them. We have also learned about loops and how to use them. We have also learned about switch statements and how to use them.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousOperators](https://docs.chaicode.com/youtube/chai-aur-c/operators/)[Next Loops](https://docs.chaicode.com/youtube/chai-aur-c/loops/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/data-types/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#_top)\n  * [ Basic Data Types ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#basic-data-types)\n  * [ Primitive Data Types ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#primitive-data-types)\n  * [ Code Used in Video ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#code-used-in-video)\n  * [ Modifier Code in Video ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#modifier-code-in-video)\n  * [ String Code in Video ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#string-code-in-video)\n  * [ Type Casting Code in Video ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#type-casting-code-in-video)\n  * [ User input code in Video ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#user-input-code-in-video)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/data-types/#summary)\n\n\n# Data Types\nIn this chapter, we will learn about data types in C++. We will start by learning about the basic data types in C++ and how to use them. Data types are used to define the type of data that a variable can hold. They are an important concept in programming and are used to ensure that the data is stored and used correctly.\n## Basic Data Types\nC++ provides several basic data types that are used to define the type of data that a variable can hold. Some of the basic data types in C++ include:\n  * **Primitive Data Types** : These are the basic data types that are used to define the type of data that a variable can hold. Some of the primitive data types in C++ include:\n  * **Derived Data Types** : These are the data types that are derived from other data types.\n  * **User-Defined Data Types** : These are the data types that are defined by the user.\n\n![Data Types in C++](https://docs.chaicode.com/_astro/data-types.NC8NisOS_Z4QXhn.webp)\nIn this chapter, we will focus on the **primitive data types** and how to use them.\n## Primitive Data Types\nC++ provides several primitive data types that are used to define the type of data that a variable can hold. Some of the primitive data types in C++ include:\n  * `int`: This is a signed integer data type that can hold values from -2147483648 to 2147483647.\n  * `float`: This is a floating-point data type that can hold values with a precision of 6 decimal places.\n  * `double`: This is a floating-point data type that can hold values with a precision of 15 decimal places.\n  * `char`: This is a character data type that can hold a single character.\n  * `bool`: This is a boolean data type that can hold either `true` or `false`.\n  * `void`: This is a data type that is used to indicate that a function does not return a value.\n\n\nWe have some additional data types that are primitives but are less discussed from academic perspective. These include:\n  * `short`: This is a signed integer data type that can hold values from -32768 to 32767.\n  * `long`: This is a signed integer data type that can hold values from -2147483648 to 2147483647.\n  * `long long`: This is a signed integer data type that can hold values from -9223372036854775808 to 9223372036854775807.\n  * `unsigned char`: This is an unsigned integer data type that can hold values from 0 to 255.\n  * `unsigned short`: This is an unsigned integer data type that can hold values from 0 to 65535.\n  * `unsigned int`: This is an unsigned integer data type that can hold values from 0 to 4294967295.\n  * `unsigned long`: This is an unsigned integer data type that can hold values from 0 to 4294967295.\n  * `unsigned long long`: This is an unsigned integer data type that can hold values from 0 to 18446744073709551615.\n\n\n## Code Used in [Video](https://youtu.be/tATskvdm3NM?feature=shared)\nprimitive-data-types.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint teaLeaves =50;\nfloat waterTemperature =85.588588;\ndouble priceOfTea =299.99;\nchar teaGrade ='A';\nbool isTeaReady =false;\ncout << waterTemperature << endl;\nreturn0;\n}\n\n```\n\nLet\u2019s go through the code line by line:\n  * The `int teaLeaves = 50;` line declares a variable named `teaLeaves` of type `int` and assigns the value `50` to it.\n  * The `float waterTemperature = 85.588588;` line declares a variable named `waterTemperature` of type `float` and assigns the value `85.588588` to it.\n  * The `double priceOfTea = 299.99;` line declares a variable named `priceOfTea` of type `double` and assigns the value `299.99` to it.\n  * The `char teaGrade = 'A';` line declares a variable named `teaGrade` of type `char` and assigns the value `'A'` to it.\n  * The `bool isTeaReady = false;` line declares a variable named `isTeaReady` of type `bool` and assigns the value `false` to it.\n  * The `cout << waterTemperature << endl;` line prints the value of the `waterTemperature` variable to the console.\n\n\n## Modifier Code in [Video](https://youtu.be/tATskvdm3NM?feature=shared)\nmodifier-code.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nunsigned smallTeaPack =1200;\nlonglong largeTeaStorage =100000000;\nshort teaSample =25;\ncout << largeTeaStorage << endl;\nreturn0;\n}\n\n```\n\nLet\u2019s go through the code line by line:\n  * The `unsigned smallTeaPack = 1200;` line declares a variable named `smallTeaPack` of type `unsigned` and assigns the value `1200` to it.\n  * The `long long largeTeaStorage = 100000000;` line declares a variable named `largeTeaStorage` of type `long long` and assigns the value `100000000` to it.\n  * The `short teaSample = 25;` line declares a variable named `teaSample` of type `short` and assigns the value `25` to it.\n  * The `cout << largeTeaStorage << endl;` line prints the value of the `largeTeaStorage` variable to the console.\n\n\n## String Code in [Video](https://youtu.be/tATskvdm3NM?feature=shared)\nstring.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring favoriteTea =\"Lemon Tea \\t\";\nstring description =\"Known as \\\"best\\\" tea\";\ncout << favoriteTea << description << endl;\nreturn0;\n}\n\n```\n\nLet\u2019s go through the code line by line:\n  * The `string favoriteTea = \"Lemon Tea \\t\";` line declares a variable named `favoriteTea` of type `string` and assigns the value `\"Lemon Tea \\t\"` to it.\n  * The `string description = \"Known as \\\"best\\\" tea\";` line declares a variable named `description` of type `string` and assigns the value `\"Known as \\\"best\\\" tea\"` to it.\n  * The `cout << favoriteTea << description << endl;` line prints the value of the `favoriteTea` and `description` variables to the console.\n\n\n## Type Casting Code in [Video](https://youtu.be/tATskvdm3NM?feature=shared)\nType casting is the process of converting a value from one data type to another data type.\ntype-casting.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nfloat teaPrice =49.99;\nint roundedTeaPrice =(int) teaPrice;\nint teaQuantity =2;\nint totalPrice = teaPrice * teaQuantity;\ncout << totalPrice << endl;\nreturn0;\n}\n\n```\n\nLet\u2019s go through the code line by line:\n  * The `float teaPrice = 49.99;` line declares a variable named `teaPrice` of type `float` and assigns the value `49.99` to it.\n  * The `int roundedTeaPrice = (int) teaPrice;` line declares a variable named `roundedTeaPrice` of type `int` and assigns the value `49` to it.\n  * The `int teaQuantity = 2;` line declares a variable named `teaQuantity` of type `int` and assigns the value `2` to it.\n  * The `int totalPrice = teaPrice * teaQuantity;` line declares a variable named `totalPrice` of type `int` and assigns the value `98` to it.\n  * The `cout << totalPrice << endl;` line prints the value of the `totalPrice` variable to the console.\n\n\n## User input code in [Video](https://youtu.be/tATskvdm3NM?feature=shared)\nuser-input.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring userTea;\nint teaQuantity;\ncout <<\"What would you like to order in tea? \\n\";\ngetline(cin, userTea);\n//ask for quantity\ncout <<\"how many cups of \"<< userTea <<\"would you like to have ? \";\ncin >> teaQuantity;\ncout << teaQuantity;\ncout << userTea;\nreturn0;\n}\n\n```\n\nLet\u2019s go through the code line by line:\n  * `#include <string>` line includes the `string` header file, which provides the `string` data type.\n  * The `string userTea;` line declares a variable named `userTea` of type `string` and does not assign a value to it.\n  * The `int teaQuantity;` line declares a variable named `teaQuantity` of type `int` and does not assign a value to it.\n  * The `cout << \"What would you like to order in tea? \\n\";` line prints the string \u201cWhat would you like to order in tea?\u201d to the console.\n  * The `getline(cin, userTea);` line reads a line of input from the console and assigns it to the `userTea` variable.\n  * The `cout << \"how many cups of \" << userTea << \"would you like to have ? \";` line prints the string \u201chow many cups of \u201d followed by the value of the `userTea` variable followed by the string \u201cwould you like to have ? \u201d to the console.\n  * The `cin >> teaQuantity;` line reads an integer from the console and assigns it to the `teaQuantity` variable.\n  * The `cout << teaQuantity;` line prints the value of the `teaQuantity` variable to the console.\n  * The `cout << userTea;` line prints the value of the `userTea` variable to the console.\n\n\n## Summary\nIn this chapter, we have learned about data types in C++. We have also learned about the primitive data types and how to use them.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousVariables & Constants](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/)[Next Operators](https://docs.chaicode.com/youtube/chai-aur-c/operators/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/functions/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#_top)\n  * [ Functions in C++ ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#functions-in-c)\n  * [ Declaring a Function ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#declaring-a-function)\n  * [ Defining a Function ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#defining-a-function)\n  * [ Calling a Function ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#calling-a-function)\n  * [ Function Parameters ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#function-parameters)\n  * [ Pass by Value ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#pass-by-value)\n  * [ Pass by Reference ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#pass-by-reference)\n  * [ Scope of Variable ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#scope-of-variable)\n  * [ Function Overloading ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#function-overloading)\n  * [ Lambda Functions ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#lambda-functions)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/functions/#summary)\n\n\n# Functions\nIn this chapter, we will learn about functions in C++. Our learning will be based on the task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\n## Functions in C++\nA function is a block of code designed to perform a specific task. Functions in C++ follow this basic syntax:\n```\n\nreturnTypefunctionName(parameters){\n// function body\n}\n\n```\n\n  * **Return Type** : Specifies the data type of the value returned by the function. Use `void` if no value is returned.\n  * **Function Name** : Describes what the function does.\n  * **Parameters** : Input values for the function (optional).\n\n\nFor example,\n```\n\n#include<iostream>\nusingnamespacestd;\n// Function to check tea temperature\nintcheckTeaTemperature(inttemperature){\nreturn temperature;\n}\nintmain(){\nint temp =checkTeaTemperature(85); // Function call\ncout <<\"The tea temperature is \"<< temp <<\"\u00b0C\"<< endl;\nreturn0;\n}\n\n```\n\n## Declaring a Function\nFunction declaration tells the compiler about the function\u2019s name, return type, and parameters. It\u2019s also called a **function prototype**. The function body is defined elsewhere.\nFor example,\n```\n\n#include<iostream>\nusingnamespacestd;\n// Declaring the function (prototype)\nvoidserveChai(intcups);\nintmain(){\nserveChai(3); // Function call\nreturn0;\n}\n// Function definition is done later\nvoidserveChai(intcups){\ncout <<\"Serving \"<< cups <<\" cups of chai!\"<< endl;\n}\n\n```\n\n## Defining a Function\nA function definition includes the full function with the body. You must define the function after declaring it if it\u2019s not inline.\nFor example,\n```\n\n#include<iostream>\nusingnamespacestd;\n// Function definition with body\nvoidmakeChai(){\ncout <<\"Boiling water, adding tea leaves, and serving chai!\"<< endl;\n}\nintmain(){\nmakeChai(); // Calling the function\nreturn0;\n}\n\n```\n\n## Calling a Function\nTo execute a function, you call it by its name followed by parentheses. If the function takes arguments, pass them inside the parentheses.\nFor example:\n```\n\n#include<iostream>\nusingnamespacestd;\n// Function to brew tea\nvoidbrewChai(){\ncout <<\"Chai is being brewed!\"<< endl;\n}\nintmain(){\nbrewChai(); // Function call\nreturn0;\n}\n\n```\n\n## Function Parameters\n  * **Formal parameters** : Defined in the function signature.\n  * **Actual parameters** : Values passed during the function call.\n  * **Default parameters** : Parameters with default values if none are passed.\n\n\nFor example,\n```\n\n#include<iostream>\nusingnamespacestd;\n// Function with default parameter\nvoidserveChai(stringteaType=\"Masala Chai\"){\ncout <<\"Serving \"<< teaType << endl;\n}\nintmain(){\nserveChai();        // Uses default parameter\nserveChai(\"Green Chai\");  // Uses actual parameter\nreturn0;\n}\n\n```\n\n## Pass by Value\nPass by value means the function receives a copy of the argument. Changes made inside the function do not affect the original variable.\nFor example,\npass-by-value.cpp```\n\n#include<iostream>\nusingnamespacestd;\nvoidpourChai(intcups){\ncups = cups +1; // Modifies local copy\ncout <<\"Poured \"<< cups <<\" cups of chai!\"<< endl;\n}\nintmain(){\nint chaiCups =2;\npourChai(chaiCups); // Passing by value\ncout <<\"Total chai cups outside function: \"<< chaiCups << endl;\nreturn0;\n}\n\n```\n\n## Pass by Reference\nPass by reference passes the actual variable, so changes in the function affect the original variable.\nFor example,\npass-by-reference.cpp```\n\n#include<iostream>\nusingnamespacestd;\nvoidrefillChai(int&cups){ // Pass by reference\ncups +=2;\ncout <<\"Refilled to \"<< cups <<\" cups of chai!\"<< endl;\n}\nintmain(){\nint chaiCups =3;\nrefillChai(chaiCups); // Passing by reference\ncout <<\"Total chai cups now: \"<< chaiCups << endl;\nreturn0;\n}\n\n```\n\n## Scope of Variable\n  * Variables declared inside a function have **local scope** (accessible only within the function).\n  * Variables declared outside all functions have **global scope** (accessible from any function).\n\n\nFor example,\nscope-of-variable.cpp```\n\n#include<iostream>\nusingnamespacestd;\nint globalChaiStock =100; // Global variable\nvoidserveChai(){\nint localCups =5; // Local variable\ncout <<\"Serving \"<< localCups <<\" cups from \"<< globalChaiStock <<\" total stock.\"<< endl;\n}\nintmain(){\nserveChai();\ncout <<\"Global chai stock after serving: \"<< globalChaiStock << endl;\nreturn0;\n}\n\n```\n\n## Function Overloading\nFunction overloading allows multiple functions with the same name but different parameter types or numbers.\nFor example,\nfunction-overloading.cpp```\n\n#include<iostream>\nusingnamespacestd;\n// Function overloading\nvoidbrewChai(intcups){\ncout <<\"Brewing \"<< cups <<\" cups of chai.\"<< endl;\n}\nvoidbrewChai(stringteaType){\ncout <<\"Brewing \"<< teaType <<\".\"<< endl;\n}\nintmain(){\nbrewChai(3);       // Calls int version\nbrewChai(\"Masala Chai\"); // Calls string version\nreturn0;\n}\n\n```\n\n## Lambda Functions\n  * A **lambda function** is an anonymous function that can be defined inline using the `[]` syntax.\n  * They\u2019re useful for short, simple functions.\n\n\nFor example,\n```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\n// Lambda function to prepare chai\nauto prepareChai =[](intcups){\ncout <<\"Preparing \"<< cups <<\" cups of chai.\"<< endl;\n};\nprepareChai(2); // Calling lambda function\nreturn0;\n}\n\n```\n\n## Summary\n  * **Function Declaration & Definition**: Tell the compiler about a function and define what it does.\n  * **Calling Functions** : Execute the function by passing arguments if required.\n  * **Pass by Value/Reference** : Controls whether changes affect the original value or a copy.\n  * **Function Overloading** : Allows multiple functions with the same name but different parameter lists.\n  * **Lambda Functions** : Short, inline functions used for simple tasks.\n\n\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousLoops](https://docs.chaicode.com/youtube/chai-aur-c/loops/)[Next Welcome](https://docs.chaicode.com/youtube/chai-aur-django/welcome/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/hello-world/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/#_top)\n  * [ Writing Hello World ](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/#writing-hello-world)\n  * [ Compiling Hello World ](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/#compiling-hello-world)\n  * [ Running Hello World ](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/#running-hello-world)\n  * [ Hello World with Comments ](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/#hello-world-with-comments)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/#summary)\n\n\n# Hello World\nIn this chapter, we will learn how to write a simple \u201cHello World\u201d program in C++. We will start by writing a program that prints \u201cHello World\u201d to the console, and then we will add some comments and formatting to make the code more readable.\n## Writing Hello World\nTo write a \u201cHello World\u201d program in C++, we need to create a new `hello.cpp` file and write the following code:\nhello.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\ncout <<\"Hello World!\"<< endl;\nreturn0;\n}\n\n```\n\nLet\u2019s break down the code:\n  * `#include <iostream>`: This line includes the `iostream` header file, which provides input and output functionality.\n  * `int main()`: This line defines the main function, which is the entry point of the program. furthermore, it specifies the return type of the function as `int`. The `int` data type is used to represent integers and this function returns an integer value.\n  * `using namespace std;`: This line allows us to use the `cout` object from the `std` namespace without having to prefix it with `std::`. The concept of namespace is important in C++ and it helps to avoid naming conflicts. In this case, we are using the `cout` & `endl` object from the `std` namespace.\n  * `cout << \"Hello World!\" << endl;`: This line prints the string \u201cHello World!\u201d to the console. `endl` is a manipulator that adds a newline character to the output.\n  * `return 0;`: This line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\n\n## Compiling Hello World\nTo compile the \u201cHello World\u201d program, we need to use a C++ compiler. A C++ compiler is a software tool that translates the C++ code into machine code that can be executed by a computer. You can use runner extension in VS Code to compile and run the code.\n## Running Hello World\nTo run the \u201cHello World\u201d program, we need to compile it and then run the compiled executable. Here are the steps to do this:\n  1. Open a terminal.\n  2. Navigate to the directory where the \u201cHello World\u201d program is saved.\n  3. Compile the program using the following command:\nTerminal window```\n\ng++hello.cpp-ohello\n\n```\n\nOR you can use runner extension in VS Code to compile and run the code.\n  4. Run the program using the following command:\nTerminal window```\n\n./hello\n\n```\n\n  5. The program should print \u201cHello World!\u201d to the console.\n\n\n## Hello World with Comments\nNow that we have written a \u201cHello World\u201d program, let\u2019s add some comments to make the code more readable. Here\u2019s the updated code:\nhello.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\n// Print \"Hello World!\" to the console\ncout <<\"Hello World!\"<< endl;\nreturn0;\n}\n\n```\n\nIn above code:\n  * The `//` symbol is used to add comments to the code.\n  * Comments are ignored by the compiler and are only meant for human readers.\n\n\n## Summary\nIn this chapter, we have learned how to write a simple \u201cHello World\u201d program in C++. We have also learned how to compile and run the program.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousC++ Intro](https://docs.chaicode.com/youtube/chai-aur-c/introduction/)[Next Variables & Constants](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/introduction/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#_top)\n  * [ What is C++? ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#what-is-c)\n  * [ Why C++? ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#why-c)\n  * [ C++ Syntax ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#c-syntax)\n  * [ C++ Features ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#c-features)\n  * [ History of C++ ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#history-of-c)\n  * [ C++ over the years ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#c-over-the-years)\n  * [ C++ Compilers ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#c-compilers)\n  * [ C++ IDEs ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#c-ides)\n  * [ C++ Standard Library ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#c-standard-library)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/introduction/#summary)\n\n\n# Introduction\nIn this chapter, we will get familiar with the C++ language and its features. We will learn about the C++ standard library and some of its most commonly used classes and functions.\n## What is C++?\nC++ is a general-purpose programming language that was developed by Bjarne Stroustrup in the 1980s. It is an extension of the C programming language and is designed to be more efficient, powerful, and easier to use. C++ is used for developing a wide range of applications, including operating systems, games, and scientific simulations.\n## Why C++?\nC++ is a powerful language that offers several advantages over C:\n  * **Performance** : C++ is generally faster than C, especially for tasks that require high performance.\n  * **Memory Management** : C++ provides automatic memory management, which helps prevent memory leaks and other memory-related issues.\n  * **Object-Oriented Programming** : C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\n  * **Standardization** : C++ is part of the C++ standard library, which provides a set of classes and functions that can be used to develop applications.\n\n\n## C++ Syntax\nC++ code is written in a similar way to C code, but with some additional features. Here are some key differences between C and C++:\n  * **Preprocessor Directives** : In C, preprocessor directives are used to include header files and perform other tasks. In C++, preprocessor directives are used to perform compile-time operations.\n  * **Namespaces** : In C++, namespaces are used to organize code into logical groups and provide a way to avoid naming conflicts.\n  * **Classes and Objects** : In C, classes are used to define objects with their own data and functions. In C++, classes are used to define objects with their own data and functions, and objects are created from classes.\n  * **Inheritance** : In C, inheritance is achieved through the use of pointers and casting. In C++, inheritance is achieved through the use of classes and objects.\n\n\n## C++ Features\nC++ offers several features that make it a powerful language for developing applications:\n  * **Object-Oriented Programming** : C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\n  * **Platform-Independence** : C++ is platform-independent, which means that the same code can be compiled and run on different platforms without modifications.\n  * **Memory Management** : C++ provides automatic memory management, which helps prevent memory leaks and other memory-related issues.\n  * **Statically Typed** : C++ is statically typed, which means that the type of a variable is determined at compile-time.\n  * **Speed** : C++ is generally a faster language, especially for tasks that require high performance.\n  * **Pointers and References** : C++ supports pointers and references, which allow for more efficient memory management and manipulation.\n\n\n## History of C++\nC++ was developed by Bjarne Stroustrup as a thesis project in the late 1980s. In his Ph.D. thesis, Stroustrup tried Simula to inject Object Oriented Programming (OOP) into the language. However, he found that the language was too complex and difficult to use, so he decided to develop his own language.\nThe first version of C++ was released in 1989, and it was called \u201cC with Classes\u201d. It was a significant departure from C, as it introduced classes and objects, which allowed for more modular and reusable code. C++ quickly gained popularity and became the de facto standard for C programming.\nOver the years, C++ has evolved and gained new features and improvements. It has become a powerful language for developing a wide range of applications, including operating systems, games, and scientific simulations.\n## C++ over the years\nC++ has undergone several major revisions and improvements over the years. Some of the key changes include:\n  * **C++98** : C++98 was released in 1998 and introduced several new features, such as the use of namespaces, templates, and exceptions.\n  * **C++03** : C++03 was released in 2003 and introduced several new features, such as the use of rvalue references, move semantics, and the new standard library.\n  * **C++11** : C++11 was released in 2011 and introduced several new features, such as the use of lambda expressions, the new standard library, and the introduction of the `auto` keyword.\n  * **C++14** : C++14 was released in 2014 and introduced several new features, such as the use of the `constexpr` keyword, the introduction of the `std::experimental` namespace, and the introduction of the `std::string_view` class.\n  * **C++17** : C++17 was released in 2017 and introduced several new features, such as the use of the `std::any` class, the introduction of the `std::optional` class, and the introduction of the `std::variant` class.\n  * **C++20** : C++20 is currently in development and is expected to introduce several new features, such as the introduction of the `std::span` class, the introduction of the `std::string_view` class, and the introduction of the `std::bit` class.\n\n\n## C++ Compilers\nC++ compilers are software tools that are used to compile C++ code into machine code that can be executed by a computer. Some popular C++ compilers include:\n  * **GCC** : GCC is a popular open-source C++ compiler that is used to compile C++ code on Linux and other Unix-like operating systems.\n  * **Clang** : Clang is a popular open-source C++ compiler that is used to compile C++ code on macOS and other Unix-like operating systems.\n  * **MSVC** : MSVC is a popular open-source C++ compiler that is used to compile C++ code on Windows.\n\n\n## C++ IDEs\nC++ IDEs are software tools that are used to develop C++ applications. Some popular C++ IDEs include:\n  * **Visual Studio** : Visual Studio is a popular integrated development environment (IDE) for C++ development on Windows.\n  * **Code::Blocks** : Code::Blocks is a free and open-source IDE for C++ development on Windows.\n  * **Eclipse** : Eclipse is a popular open-source IDE for C++ development on Linux and other Unix-like operating systems.\n  * **CLion** : CLion is a commercial IDE for C++ development on Windows and macOS.\n  * **VS Code** : VS Code is what we will use in this course, with some extensions to make it easier to use.\n\n\n## C++ Standard Library\nThe C++ standard library provides a set of classes and functions that can be used to develop applications. Some of the most commonly used classes and functions in the C++ standard library include:\n  * **Strings** : The `string` class is used to store and manipulate strings.\n  * **Vectors** : The `vector` class is used to store and manipulate dynamic arrays.\n  * **Maps** : The `map` class is used to store and manipulate key-value pairs.\n  * **Algorithms** : The `algorithm` library provides a set of functions for performing common operations on containers, such as sorting and searching.\n  * **Input/Output** : The `iostream` library provides classes and functions for performing input and output operations.\n\n\n## Summary\nIn this chapter, we have learned about C++ and its syntax. We have also learned about the C++ standard library and some of its most commonly used classes and functions.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousWelcome](https://docs.chaicode.com/youtube/chai-aur-c/welcome/)[Next First Program in C++](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/loops/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#_top)\n  * [ While Loop ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#while-loop)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#task)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#solution)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#going-through-the-code)\n  * [ Do-While Loop ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#do-while-loop)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#task-1)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#solution-1)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#going-through-the-code-1)\n  * [ For Loop ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#for-loop)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#task-2)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#solution-2)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#going-through-the-code-2)\n  * [ Break Keyword ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#break-keyword)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#task-3)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#solution-3)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#going-through-the-code-3)\n  * [ Continue Keyword ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#continue-keyword)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#task-4)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#solution-4)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#going-through-the-code-4)\n  * [ Nested Loops ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#nested-loops)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#task-5)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#solution-5)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#going-through-the-code-5)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/loops/#summary)\n\n\n# Loops\nIn this chapter, we will learn about loops in C++. Our learning will be based on the task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\n## While Loop\nWhile loop is used to execute a block of code as long as a condition is true. The loop will continue to execute as long as the condition is true. The loop will execute at least once, even if the condition is initially false.\n### Task\nWrite a program that keeps track of tea orders. Each time a cup of tea is made, decrease the number of cups remaining. The loop should run until all cups are served.\n### Solution\nwhile.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nint teaCups;\ncout <<\"Enter the number of tea cups to server: \";\ncin >> teaCups;\n//while loop\nwhile(teaCups >0){\nteaCups--;\ncout <<\"Serving a cup of tea \\n\"<< teaCups <<\" remaining\"<< endl;\n}\ncout <<\"All tea cups are served. \"<< endl;\nreturn0;\n}\n\n```\n\n### Going through the code:\nWe have already gone through the basic code already many times, in this chapter we will focus on the `while` loop.\n  * while loop is used to execute a block of code as long as a condition is true.\n  * The condition is checked before each iteration of the loop.\n  * The loop will continue to execute as long as the condition is true.\n  * The loop will execute at least once, even if the condition is initially false.\n```\n\nwhile(condition){\n// code to be executed\n}\n\n```\n\nHere while checks if the teaCups is greater than 0, if it is true, it will execute the code inside the loop. If the teaCups is 0, the loop will not execute and the program will continue to the next line.\n\n\n## Do-While Loop\nDo-while loop is used to execute a block of code as long as a condition is true. The loop will execute at least once, even if the condition is initially false.\n### Task\nCreate a program that asks the user if they want more tea. Keep asking them until they type \u201cno\u201d (case-insensitive), using a do-while loop.\n### Solution\ndo-while.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring response;\ndo{\ncout <<\"Do you want more tea (yes/no): \";\ngetline(cin, response);\n}while(response !=\"no\"|| response !=\"No\");\n}\n\n```\n\n### Going through the code\nHere we have used the `do-while` loop. The loop will execute at least once, even if the condition is initially false.\n```\n\ndo{\n// code to be executed\n}while(condition);\n\n```\n\nHere `do` prints the message and asks the user for input. Then it checks if the response is equal to \u201cno\u201d or \u201cNo\u201d. If it is, it will execute the code inside the loop. If it is not, it will exit the loop and continue to the next line.\n## For Loop\nFor loop is used to execute a block of code for a specified number of times. The loop will execute the code inside the loop for the specified number of times.\n### Task\nWrite a program that prints the brewing instructions for making 5 cups of tea. The brewing process should be printed once for each cup using a for loop.\n### Solution\nfor.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nint teaCups =5;\nint i =100;\nfor(int i =1; i <= teaCups ; i++){\ncout <<\"Brewing cup \"<< i <<\" of tea...\"<< endl;\n}\ncout << i;\ncout <<\"Outside of loop\";\nreturn0;\n}\n\n```\n\n### Going through the code:\nHere we are using the `for` loop. The loop will execute the code inside the loop for the specified number of times.\n```\n\nfor(initialization; condition; increment/decrement){\n// code to be executed\n}\n\n```\n\nFor loop has three parts:\n  * Initialization: This is where you initialize the loop variable.\n  * Condition: This is where you check if the loop should continue or not.\n  * Increment/Decrement: This is where you update the loop variable.\n\n\nIn our case, we are initializing the loop variable with `i = 1` and checking if the loop should continue with `i <= teaCups`. If the condition is true, the code inside the loop will be executed. If the condition is false, the loop will exit and the program will continue to the next line.\n## Break Keyword\nBreak keyword is used to exit the loop immediately, without executing the remaining code inside the loop.\n### Task\nWrite a program that keeps serving tea until the user says they\u2019ve had enough (input \u2018stop\u2019). Use a break statement to exit the loop when the user types \u2018stop\u2019.\n### Solution\nbreak.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring response;\nwhile(true){\ncout <<\"Do you want more tea (type 'stop' to exit)?: \";\ngetline(cin, response);\nif(response ==\"stop\"){\n//exit the loop\nbreak;\n}\ncout <<\"Here is your another cup of tea. \\n\";\n}\ncout <<\"No more tea will be served to you\";\nreturn0;\n}\n\n```\n\n### Going through the code:\nIn this case, we are using the `break` keyword to exit the loop when the user types \u2018stop\u2019. The `break` keyword is used to exit the loop immediately, without executing the remaining code inside the loop.\n## Continue Keyword\nContinue keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\n### Task\nWrite a program that skips brewing green tea if the user dislikes it. Use a continue statement to skip over green tea but brew other types of tea in a list.\n### Solution\n```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring teaTypes[5]={\"Oolong tea\",\"Orange Tea\",\"Green Tea\",\"Black Tea\",\"Lemon Tea\"};\nfor(int i =0; i <5; i++){\nif(teaTypes[i]==\"Green Tea\"){\ncout <<\"Skipping the \"<<teaTypes[i]<< endl;\ncontinue;\n}\ncout <<\"Brewing \"<<teaTypes[i]<<\"...\"<< endl;\n}\nreturn0;\n}\n\n```\n\n### Going through the code:\nIn this code solution, we are introducing 2 new concepts: `string teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"};` This line declares an array of strings with 5 elements. Array is a collection of elements of the same type. In this case, we are declaring an array of strings. In memory, the array is stored as a contiguous block of memory.\nAlso we are using the `continue` keyword to skip over the green tea. The `continue` keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\n## Nested Loops\nNested loops are loops inside of loops. The inner loop is executed for each iteration of the outer loop.\n### Task\nWrite a program that brews multiple cups of different types of tea. For each type of tea, brew 3 cups using a nested loop.\n### Solution\nnested-loops.cpp```\n\n#include<iostream>\n#include<string>\nusingnamespacestd;\nintmain(){\nstring teaTypes[5]={\"Oolong tea\",\"Orange Tea\",\"Green Tea\",\"Black Tea\",\"Lemon Tea\"};\nfor(int i =0; i <5; i++){\ncout <<\"Brewing \"<<teaTypes[i]<<\"...\"<< endl;\nfor(int j =1; j <=3; j++){\ncout <<\"Brewing \"<< j <<\" cup of \"<<teaTypes[i]<< endl;\n}\n}\nreturn0;\n}\n\n```\n\n### Going through the code:\nIn this code solution, we have already gone through the concept of Array. Further, we are using nested loops to brew multiple cups of different types of tea. The outer loop is used to iterate over the array of strings, and the inner loop is used to iterate over the number of cups to be brewed.\nFor every iteration of the outer loop, the inner loop will execute 3 times. The inner loop will print the number of cups being brewed and the type of tea being brewed.\n## Summary\nIn this chapter, we have learned about loops in C++. We have also learned about the different types of loops and how to use them.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousControl Flow](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/)[Next Functions](https://docs.chaicode.com/youtube/chai-aur-c/functions/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/operators/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#_top)\n  * [ Types of Operators ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#types-of-operators)\n  * [ Arithmetic Operators ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#arithmetic-operators)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#task)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#solution)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#going-through-the-code)\n  * [ Assignment Operators ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#assignment-operators)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#task-1)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#solution-1)\n    * [ Going through the code: ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#going-through-the-code-1)\n  * [ Relational Operators ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#relational-operators)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#task-2)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#solution-2)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#going-through-the-code-2)\n  * [ Logical Operators ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#logical-operators)\n    * [ Task ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#task-3)\n    * [ Solution ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#solution-3)\n    * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#going-through-the-code-3)\n  * [ Bitwise Operators ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#bitwise-operators)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/operators/#summary)\n\n\n# Operators\nIn this chapter, we will learn about operators in C++. We will start by learning about the different types of operators in C++ and how to use them. Operators are used to perform operations on variables and values.\n## Types of Operators\nC++ provides several types of operators that are used to perform operations on variables and values. Some of the types of operators in C++ include:\n  * **Arithmetic Operators** : These are operators that are used to perform arithmetic operations on variables and values.\n  * **Assignment Operators** : These are operators that are used to assign values to variables.\n  * **Comparison Operators** : These are operators that are used to compare values and determine if they are equal or not.\n  * **Logical Operators** : These are operators that are used to perform logical operations on variables and values.\n  * **Increment and Decrement Operators** : These are operators that are used to increment or decrement the value of a variable.\n  * **Bitwise Operators** : These are operators that are used to perform bitwise operations on variables and values.\n\n\nTask Time \nTo learn these operators, we will use tasks based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\n## Arithmetic Operators\nArithmetic operators are used to perform arithmetic operations on variables and values.\n### Task\nCreate a program that calculates the total price of tea cups. The user inputs the number of cups they want and the price per cup. The program should calculate the total price, apply a 5% discount if the total is above a certain amount, and show the final price.\n### Solution\narithmetic-operators.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint cups;\ndouble pricePerCup, totalPrice, discountedPrice;\ncout <<\"Enter the number of tea cups: \";\ncin >> cups;\ncout <<\"Enter the price per cups: \";\ncin >> pricePerCup;\ntotalPrice = cups * pricePerCup;\n// apply 5% discount if total price is above 100\nif(totalPrice >100){\ndiscountedPrice = totalPrice -(totalPrice *0.05);\ncout <<\"Discounted price is: \"<< discountedPrice << endl;\n}else{\ncout <<\"Total price is \"<< totalPrice << endl;\n}\nreturn0;\n}\n\n```\n\n### Going through the code:\n  * The `int cups;` line declares a variable named `cups` of type `int` and does not assign a value to it.\n  * The `double pricePerCup, totalPrice, discountedPrice;` line declares three variables named `pricePerCup`, `totalPrice`, and `discountedPrice` of type `double` and does not assign a value to them.\n  * The `cout << \"Enter the number of tea cups: \";` line prints the string \u201cEnter the number of tea cups: \u201d to the console.\n  * The `cin >> cups;` line reads an integer from the console and assigns it to the `cups` variable.\n  * The `cout << \"Enter the price per cups: \";` line prints the string \u201cEnter the price per cups: \u201d to the console.\n  * The `cin >> pricePerCup;` line reads a double from the console and assigns it to the `pricePerCup` variable.\n  * The `totalPrice = cups * pricePerCup;` line calculates the total price by multiplying the `cups` and `pricePerCup` variables.\n  * The `if (totalPrice > 100) {` line starts an `if` statement that checks if the `totalPrice` variable is greater than `100`.\n  * The `discountedPrice = totalPrice - (totalPrice * 0.05);` line calculates the discounted price by subtracting the `totalPrice` multiplied by `0.05` from the `totalPrice` variable.\n  * The `cout << \"Discounted price is: \" << discountedPrice << endl;` line prints the string \u201cDiscounted price is: \u201d followed by the value of the `discountedPrice` variable to the console.\n  * The `} else {` line starts an `else` block that is executed if the `if` statement is false.\n  * The `cout << \"Total price is \" << totalPrice << endl;` line prints the string \u201cTotal price is \u201d followed by the value of the `totalPrice` variable to the console.\n  * The `}` line ends the `if` statement.\n\n\n## Assignment Operators\nAssignment operators are used to assign values to variables.\n### Task\nWrite a program that allows a user to input the number of tea bags they have. Assign additional bags to them based on certain conditions (e.g., if they have fewer than 10 bags, give them 5 extra). Update the original number using assignment operators.\n### Solution\nassignment-operators.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint teaBags;\ncout <<\"Enter the number of tea bags you have: \";\ncin >> teaBags;\nif(teaBags <10){\n// teaBags = teaBags + 5\nteaBags +=5;\n}\ncout <<\"Your total bags are: \"<< teaBags;\nreturn0;\n}\n\n```\n\n### Going through the code:\n  * The `int teaBags;` line declares a variable named `teaBags` of type `int` and does not assign a value to it.\n  * The `cout << \"Enter the number of tea bags you have: \";` line prints the string \u201cEnter the number of tea bags you have: \u201d to the console.\n  * The `cin >> teaBags;` line reads an integer from the console and assigns it to the `teaBags` variable.\n  * The `if (teaBags < 10) {` line starts an `if` statement that checks if the `teaBags` variable is less than `10`.\n  * The `// teaBags = teaBags + 5` line adds `5` to the `teaBags` variable.\n  * The `teaBags += 5;` line adds `5` to the `teaBags` variable.\n  * The `} ` line ends the `if` statement.\n  * The `cout << \"Your total bags are: \" << teaBags;` line prints the string \u201cYour total bags are: \u201d followed by the value of the `teaBags` variable to the console.\n\n\n## Relational Operators\nRelational operators are used to compare values and determine if they are equal or not.\n### Task\nA tea shop offers a loyalty program. Customers who buy more than 20 cups of tea get a special \u201cGold\u201d badge, and those who buy 10 to 20 cups get a \u201cSilver\u201d badge. Write a program to display the badge they will receive based on the number of cups they buy.\n### Solution\nrelational-operators.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint cups;\ncout <<\"Enter the number of cups you have\";\ncin >> cups;\nif(cups >20){\ncout <<\"You will get a GOLD badge\"<< endl;\n}elseif(cups >=10&& cups <=20){\ncout <<\"You will get a SILVER badge\"<< endl;\n}else{\ncout <<\"NO BADGE for you\"<< endl;\n}\nreturn0;\n}\n\n```\n\n### Going through the code\n  * The `int cups;` line declares a variable named `cups` of type `int` and does not assign a value to it.\n  * The `cout << \"Enter the number of cups you have\";` line prints the string \u201cEnter the number of cups you have\u201d to the console.\n  * The `cin >> cups;` line reads an integer from the console and assigns it to the `cups` variable.\n  * The `if (cups > 20) {` line starts an `if` statement that checks if the `cups` variable is greater than `20`.\n  * The `cout << \"You will get a GOLD badge\" << endl;` line prints the string \u201cYou will get a GOLD badge\u201d followed by a newline character to the console.\n  * The `} else if (cups >= 10 && cups <= 20) {` line starts an `else if` block that is executed if the `if` statement is false.\n  * The `cout << \"You will get a SILVER badge\" << endl;` line prints the string \u201cYou will get a SILVER badge\u201d followed by a newline character to the console.\n  * The `} else {` line starts an `else` block that is executed if the `if` statement is false.\n  * The `cout << \"NO BADGE for you\" << endl;` line prints the string \u201cNO BADGE for you\u201d followed by a newline character to the console.\n  * The `}` line ends the `if` statement.\n\n\n## Logical Operators\nLogical operators are used to perform logical operations on variables and values.\n### Task\nCreate a program that checks if a user is eligible for a tea subscription discount. The discount applies if the user is either a student or has purchased more than 15 cups. Ask the user to input their status (student or not) and their cup count.\n### Solution\nlogical-operators.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nbool isStudent;\nint cups;\ncout <<\"Are you a student (1 for yes and 0 for No) ?\";\ncin >> isStudent;\ncout <<\"How many cups of tea have you purchased ?\";\ncin >> cups;\nif(isStudent || cups >15){\ncout <<\"You are elegible for a discount \"<< endl;\n}else{\ncout <<\"You are NOT elegible for a discount \"<< endl;\n}\nreturn0;\n}\n\n```\n\n### Going through the code\n  * The `bool isStudent;` line declares a variable named `isStudent` of type `bool` and does not assign a value to it.\n  * The `int cups;` line declares a variable named `cups` of type `int` and does not assign a value to it.\n  * The `cout << \"Are you a student (1 for yes and 0 for No) ?\";` line prints the string \u201cAre you a student (1 for yes and 0 for No) ?\u201d to the console.\n  * The `cin >> isStudent;` line reads a boolean value from the console and assigns it to the `isStudent` variable.\n  * The `cout << \"How many cups of tea have you purchased ?\";` line prints the string \u201cHow many cups of tea have you purchased ?\u201d to the console.\n  * The `cin >> cups;` line reads an integer from the console and assigns it to the `cups` variable.\n  * The `if (isStudent || cups > 15) {` line starts an `if` statement that checks if the `isStudent` variable is true or if the `cups` variable is greater than `15`.\n  * The `cout << \"You are elegible for a discount \" << endl;` line prints the string \u201cYou are elegible for a discount \u201d followed by a newline character to the console.\n  * The `} else {` line starts an `else` block that is executed if the `if` statement is false.\n  * The `cout << \"You are NOT elegible for a discount \" << endl;` line prints the string \u201cYou are NOT elegible for a discount \u201d followed by a newline character to the console.\n  * The `}` line ends the `if` statement.\n\n\n## Bitwise Operators\nBitwise operators are used to perform bitwise operations on variables and values. Bitwise operations are used to manipulate individual bits of a binary number. Decimal numbers are represented using binary numbers, which are made up of 1s and 0s. Bitwise operators are used to perform operations on these binary numbers.\nYou can learn more about bitwise operators by visiting [Bitwisecmd.com](https://bitwisecmd.com/). We talked about it in the video, watch it for more information.\n## Summary\nIn this chapter, we have learned about operators in C++. We have also learned about the different types of operators and how to use them. By the end of this chapter, you should have a good understanding of how to use operators in C++.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousData Types](https://docs.chaicode.com/youtube/chai-aur-c/data-types/)[Next Control Flow](https://docs.chaicode.com/youtube/chai-aur-c/control-flow/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/#_top)\n  * [ Variables and Constants ](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/#variables-and-constants)\n  * [ Code used in Video ](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/#code-used-in-video)\n  * [ Going through the code ](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/#going-through-the-code)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-c/variables-and-constants/#summary)\n\n\n# Variables & Constants\nIn this chapter, we will learn about variables and constants in C++. We will start by learning about variables and how to declare and initialize them. Then, we will learn about constants and how to declare and initialize them.\n## Variables and Constants\n  * Variables are used to store data in a program. They can be changed during the execution of the program.\n  * Constants, on the other hand, are used to store data that cannot be changed during the execution of the program. They are declared using the `const` keyword.\n\n\nHere\u2019s an example of declaring and initializing a variable:\nvariable.cpp```\n\nint age =25;\n\n```\n\nIn this example, we declare a variable named `age` and initialize it with the value `25`. The `int` keyword is used to declare the variable as an integer.\nHere\u2019s an example of declaring and initializing a constant:\nconstant.cpp```\n\nconstdouble PI =3.14159;\n\n```\n\nIn this example, we declare a constant named `PI` and initialize it with the value `3.14159`. The `const` keyword is used to declare the constant as a constant.\n## Code used in [Video](https://www.youtube.com/watch?v=YHGqfKh8n4Q&list=PLu71SKxNbfoCPfgKZS8UE0MDuwiKvL8zi&index=4)\nvariable-and-constants.cpp```\n\n#include<iostream>\nusingnamespacestd;\nintmain(){\nint score;\nscore =110;\nconstint uid =232323;\nint hiteshBalance =500;\nhiteshBalance =1000;\nuid =1223;\ncout <<\"Welcome to chai with cpp 1\"<< endl ;\ncout <<\"Welcome to chai with cpp 2\"<< endl ;\ncout <<\"Welcome to chai with cpp 3\"<< endl ;\nreturn0;\n}\n\n```\n\n## Going through the code\n  * The `int score;` line declares a variable named `score` of type `int`.\n  * The `score = 110;` line assigns the value `110` to the `score` variable.\n  * The `const int uid = 232323;` line declares a constant named `uid` of type `int` and assigns the value `232323` to it.\n  * The `int hiteshBalance = 500;` line declares a variable named `hiteshBalance` of type `int` and assigns the value `500` to it.\n  * The `hiteshBalance = 1000;` line assigns the value `1000` to the `hiteshBalance` variable.\n  * The `uid = 1223;` line assigns the value `1223` to the `uid` constant.\n  * The `cout << \"Welcome to chai with cpp 1\" << endl ;` line prints the string \u201cWelcome to chai with cpp 1\u201d to the console.\n  * The `cout << \"Welcome to chai with cpp 2\" << endl ;` line prints the string \u201cWelcome to chai with cpp 2\u201d to the console.\n  * The `cout << \"Welcome to chai with cpp 3\" << endl ;` line prints the string \u201cWelcome to chai with cpp 3\u201d to the console.\n\n\n## Summary\nIn this chapter, we have learned about variables and constants in C++. We have also learned how to declare and initialize variables and constants.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousFirst Program in C++](https://docs.chaicode.com/youtube/chai-aur-c/hello-world/)[Next Data Types](https://docs.chaicode.com/youtube/chai-aur-c/data-types/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-c/welcome/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-c/welcome/#_top)\n\n\n# Welcome\nHaanji! Swagat hai **Chai aur Docs** mein. \ud83c\udf89\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Chai aur C++** \u201d series on the [Chai aur Code](https://www.youtube.com/@chaiaurcode) YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nHindi\nPlay\nEnglish\nPlay\nLet\u2019s begin with the basics in the next section\u2026\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 17, 2025\n[ PreviousCollaborate with Github](https://docs.chaicode.com/youtube/chai-aur-git/github/)[Next C++ Intro](https://docs.chaicode.com/youtube/chai-aur-c/introduction/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/#_top)\n  * [ Prerequisites ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/#prerequisites)\n  * [ Adding Rate Limiting ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/#adding-rate-limiting)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/#summary)\n  * [ References ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/#references)\n\n\n# Nginx Rate Limit\nRate limiting can be implemented in two primary ways: directly in your application\u2019s server code, or at the infrastructure level on the machine where your server is running.\nIn this tutorial, we will learn how to do rate limit via Nginx.\nPlay\n## Prerequisites\nBefore going forward, make sure you have the following prerequisites:\n  * A server with root access\n  * A domain name or IP address\n  * A web server that can be used to serve static files\n  * Nginx installed and configured on the machine\n\n\n## Adding Rate Limiting\nNginx provides a simple way to add rate limiting using the `limit_req_zone` and `limit_req` directives.\n  1. **Edit the main configuration file to define a rate limit zone:**\nTerminal window```\n\nsudovim/etc/nginx/nginx.conf\n\n```\n\n  2. **Add the following to the`http` block:**\n```\n\nhttp {\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n...\n}\n\n```\n\nThe directive `limit_req_zone` is used in Nginx to define a shared memory zone that will be used to store the state of rate limits for incoming requests. Here\u2019s a breakdown of the specific directive you provided:\n```\n\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n\n```\n\n     * **`$binary_remote_addr`**: This is a variable that holds the client\u2019s IP address in a binary format. Using the binary format saves memory, which is important when dealing with large numbers of requests.\n     * **`zone=mylimit:10m`**: This specifies the name and size of the shared memory zone used to store the state of rate limits.\n       * `mylimit` is the name of the zone.\n       * `10m` means that the size of the zone is 10 megabytes. This size dictates how many IP addresses and their request states can be stored in memory. A 10MB zone can typically store about 160,000 states (given that each state takes about 64 bytes).\n     * **`rate=2r/s`**: This sets the request rate limit.\n       * `2r/s` means that each IP address is allowed to make 2 requests per second.\nWhen you configure `limit_req_zone` in your Nginx configuration, it sets up a system to control how many requests a client can make to your server in a given time frame. This can help protect your server from being overwhelmed by too many requests from a single client, which can be a form of denial-of-service attack.\n  3. **Edit your server block configuration to apply the rate limit:**\nTerminal window```\n\nsudovim/etc/nginx/sites-available/default\n\n```\n\n  4. **Add the following inside the`server` block:**\n```\n\nserver {\n...\nlocation/ {\nlimit_req zone=mylimit burst=20 nodelay;\ntry_files $uri$uri/ =404;\n}\n...\n}\n\n```\n\nabove code applies the rate limiting defined by the `mylimit` zone.\n     * `burst=20` allows a burst of up to 20 requests beyond the defined rate. **So, even if the rate limit is set to 2 requests per second, the burst allows up to 20 requests to be made in a second. The requests exceeding the rate limit will be rejected immediately.**\n     * `nodelay` means that requests that exceed the rate limit should be rejected immediately rather than delayed.\n  5. **Test and reload Nginx:**\nTerminal window```\n\nsudonginx-t\nsudosystemctlreloadnginx\n\n```\n\n\n\n## Summary\nIn this tutorial, we have learned how to do rate limit via Nginx.\n## References\n[Module ngx_http_limit_req_module](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html) nginx.org\n[Rate Limiting with NGINX \u2013 NGINX Community Blog](https://blog.nginx.org/blog/rate-limiting-nginx) blog.nginx.org\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 21, 2025\n[ PreviousNginx Configuration](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/)[Next Nginx SSL Setup](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#_top)\n  * [ Prerequisites ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#prerequisites)\n  * [ Install Certbot and the Nginx Plugin ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#install-certbot-and-the-nginx-plugin)\n  * [ Configure Nginx ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#configure-nginx)\n  * [ Create an A Record in Your Domain Registrar ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#create-an-a-record-in-your-domain-registrar)\n  * [ Obtain an SSL Certificate ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#obtain-an-ssl-certificate)\n  * [ Access Your Site ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#access-your-site)\n  * [ Renewing the Certificate ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#renewing-the-certificate)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/#summary)\n\n\n# Setup SSL for Nginx\nThis guide will help you set up SSL for your Nginx server on Ubuntu using Certbot. We will use a subdomain from GoDaddy, and the steps include installing Certbot, configuring Nginx, and generating an SSL certificate.\nPlay\n## Prerequisites\nBefore going forward, make sure you have the following prerequisites:\n  * A server with root access\n  * A domain name or IP address\n  * A web server that can be used to serve static files\n  * Nginx installed and configured on the machine\n\n\n## Install Certbot and the Nginx Plugin\nFirst, install Certbot and the Nginx plugin using the following command:\nTerminal window```\n\nsudoaptinstallcertbotpython3-certbot-nginx\n\n```\n\n## Configure Nginx\nEdit your Nginx configuration file to include your server name. Open the file with a text editor:\nTerminal window```\n\nsudovim/etc/nginx/sites-available/default\n\n```\n\nAdd your subdomain in the `server_name` directive:\n```\n\nserver {\n...\nserver_name test.chaicode.com;\n...\n}\n\n```\n\nSave the file and exit the editor. Then, test your Nginx configuration:\nTerminal window```\n\nsudonginx-t\n\n```\n\n## Create an A Record in Your Domain Registrar\nLog in to your domain registrar (e.g., GoDaddy) and create an `A` record pointing to the IP address of your server.\n  * **Record Type:** A\n  * **Name:** test.chaicode.com\n  * **Value:** _IPv4 address of the server_\n\n\nNOTE: Its always a good idea to create a elastic/static IP for your server. This will make sure that your IP address doesn\u2019t change on restart or reboot.\n## Obtain an SSL Certificate\nRun Certbot to obtain an SSL certificate for your subdomain:\nTerminal window```\n\nsudocertbot--nginx-dtest.chaicode.com\n\n```\n\nFollow the prompts:\n  1. Enter the email address associated with your domain registrar account.\n  2. Accept the terms of service.\n  3. Press Enter to continue.\n\n\nCertbot will automatically configure your Nginx to use the new certificate. You should see a message indicating that the certificate was successfully issued.\n![Site Access](https://wajeshubham-portfolio.s3.ap-south-1.amazonaws.com/Screenshot+2024-07-10+001416.png)\n## Access Your Site\nYou can now access your site using HTTPS:\nTerminal window```\n\nhttps://test.chaicode.com\n\n```\n\n![Site Access](https://wajeshubham-portfolio.s3.ap-south-1.amazonaws.com/Screenshot+2024-07-10+001500.png)\n## Renewing the Certificate\nTo check if the certificate is close to expiring, run:\nTerminal window```\n\nsudocertbotrenew--dry-run\n\n```\n\nTo renew the certificate, run:\nTerminal window```\n\nsudocertbotrenew\n\n```\n\nThis guide ensures that your Nginx server is secured with SSL, making your site accessible over HTTPS.\n## Summary\nIn this guide, we learned how to set up SSL for Nginx on Ubuntu using Certbot. We installed Certbot and the Nginx plugin, configured Nginx, created an A record in your domain registrar, and obtained an SSL certificate. We also learned how to renew the certificate.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 21, 2025\n[ PreviousNginx Rate Limit](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/)[Next Deploy Node API](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#_top)\n  * [ Installation ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#installation)\n  * [ Configuration ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#configuration)\n  * [ Usage ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#usage)\n  * [ Easy log messages ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#easy-log-messages)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#summary)\n\n\n# Advanced Node.js Logging\nNode Logger is a powerful tool that allows you to log messages to the console, file, or other destinations. It provides a simple and flexible API for logging messages, making it easy to debug and monitor your Node.js applications. Console logs are great for quick debugging, but they can be difficult to manage and analyze.\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Advance logging with morgan and winston** \u201d section in the [Complete Web Dev Course on Udemy](https://www.udemy.com/course/web-dev-master/) course. For the best learning experience, we recommend following these docs alongside our video lectures.\n[![udemy](https://docs.chaicode.com/_astro/udemy.CjCrqgZ__aWzih.webp)](https://hitesh.ai/udemy)\n> This is my personal configuration for Winston logger. You can use it as a reference.\n## Installation\nTo install Winston, you can use the following command:\n  * [ bun ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#tab-panel-162)\n  * [ pnpm ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#tab-panel-163)\n  * [ npm ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#tab-panel-164)\n  * [ yarn ](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/#tab-panel-165)\n\n\nTerminal window```\n\nbunaddwinstonmorgan\n\n```\n\nTerminal window```\n\npnpmaddwinstonmorgan\n\n```\n\nTerminal window```\n\nnpminstallwinstonmorgan\n\n```\n\nTerminal window```\n\nyarnaddwinstonmorgan\n\n```\n\nThis will install the `winston` and `morgan` packages, which are used to configure and use the Winston logger.\n## Configuration\nTo configure Winston, you can create a new file called `logger.js` in the root directory of your project and add the following code:\nlogger.js```\n\nimport{createLogger,format,transports}from\"winston\";\nconst{combine,timestamp,json,colorize}=format;\n// Custom format for console logging with colors\nconstconsoleLogFormat=format.combine(\nformat.colorize(),\nformat.printf(({level,message,timestamp})=>{\nreturn`${level}: ${message}`;\n})\n);\n// Create a Winston logger\nconstlogger=createLogger({\nlevel:\"info\",\nformat:combine(colorize(),timestamp(),json()),\ntransports:[\nnewtransports.Console({\nformat:consoleLogFormat,\n}),\nnewtransports.File({filename:\"app.log\"}),\n],\n});\nexportdefaultlogger;\n\n```\n\nThis code configures Winston to log messages to the console and a file called `app.log`. It also sets the log level to `info` and uses the `colorize` and `timestamp` formatters to add colors and timestamps to the console logs.\n## Usage\nTo use the Winston logger, you can import it in your code and use it as follows:\nFirst go to your index.js file and add the following code:\nindex.js```\n\nimportloggerfrom\"./logger\";\nimportmorganfrom\"morgan\";\nconstmorganFormat=\":method :url :status :response-time ms\";\napp.use(\nmorgan(morganFormat,{\nstream:{\nwrite:(message)=>{\nconstlogObject={\nmethod:message.split(\"\")[0],\nurl:message.split(\"\")[1],\nstatus:message.split(\"\")[2],\nresponseTime:message.split(\"\")[3],\n};\nlogger.info(JSON.stringify(logObject));\n},\n},\n})\n);\n\n```\n\nThis will log the messages to the console and the file `app.log`. The `morgan` package is used to format the log messages and the `stream` option is used to write the log messages to the console.\n## Easy log messages\nTo use the Winston logger, you can import it in your code and use it as follows:\n```\n\nimportloggerfrom\"./logger\";\nlogger.info(\"This is an info message\");\nlogger.error(\"This is an error message\");\nlogger.warn(\"This is a warning message\");\nlogger.debug(\"This is a debug message\");\n\n```\n\nThis will log the messages to the console and the file `app.log`.\n## Summary\nIn this tutorial, we have learned how to use the advanced Node Logger such as Winston and morgan. We have also learned how to configure and use the Winston logger in our Node.js applications. By using the advanced Node Logger, we can easily log messages to the console, file, or other destinations, making it easier to debug and monitor our applications.\nNow, you can use the advanced Node Logger to log messages in your Node.js applications and make it easier to debug and monitor your applications.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 22, 2025\n[ PreviousPostgreSQL on VPS](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/#_top)\n  * [ Prerequisites ](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/#prerequisites)\n  * [ Create a Small Express App ](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/#create-a-small-express-app)\n  * [ Do a reverse proxy with nginx ](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/#do-a-reverse-proxy-with-nginx)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/#summary)\n\n\n# Deploy Node API with Nginx\nPlay\n## Prerequisites\nBefore going forward, make sure you have the following prerequisites:\n  * A server with root access\n  * A domain name or IP address\n  * A web server that can be used to serve static files\n  * Nginx installed and configured on the machine\n  * SSL configured for the domain name or IP address\n\n\n## Create a Small Express App\nWe will create a small express app to test the deployment. Here are the steps:\n  1. **Install`nodejs` and `npm` on ubuntu**\nTerminal window```\n\nsudoaptinstallnodejs\nsudoaptinstallnpm\n\n```\n\n  2. **Create a project dir and initialize a node app**\nTerminal window```\n\nmkdirexpress-app\ncdexpress-app\nnpminit-y\n\n```\n\n  3. **Install basic dependencies**\nTerminal window```\n\nnpminstallexpressnodemon\n\n```\n\n  4. **Update the`package.json`**\n```\n\n{\n\"name\":\"express-app\",\n\"version\":\"1.0.0\",\n\"description\":\"\",\n\"main\":\"index.js\",\n\"type\":\"module\",\n\"scripts\":{\n\"dev\":\"nodemon index.js\"\n},\n\"keywords\":[],\n\"author\":\"\",\n\"license\":\"ISC\",\n\"dependencies\":{\n\"express\":\"^4.19.2\",\n\"nodemon\":\"^3.1.4\"\n}\n}\n\n```\n\n  5. **Create an`index.js` file and add the following code**\nTerminal window```\n\ntouchindex.js\n\n```\n\n```\n\nimportexpressfrom\"express\";\nconstapp=express();\napp.get(\"/api\",(req,res)=>{\nreturnres.status(200).json({\nmessage:\"server working\",\n});\n});\napp.listen(8080,()=>console.log(\"Server is running on 8080\"));\n\n```\n\n  6. **Install`pm2` to run this dummy app in the background**\nTerminal window```\n\nnpminstall-gpm2# if npm is not available use sudo npm install -g pm2\n\n```\n\n  7. **Run the application with the following command:**\nTerminal window```\n\npm2start\"npm run dev\"\n\n```\n\nThis will start the application on port `8080`.\n\n\n## Do a reverse proxy with nginx\nNginx can also act as a reverse proxy, forwarding client requests to other servers. Here are the steps to configure Nginx as a reverse proxy:\n  1. **Edit your server block configuration:**\nTerminal window```\n\nsudovim/etc/nginx/sites-available/default\n\n```\n\n  2. **Configure the server block to act as a reverse proxy:**\n```\n\nserver {\nlisten 80;# Listen on port 80 for incoming HTTP requests\nserver_name localhost;# Server name or domain name this block will respond to\nlocation/ {\nproxy_pass http://127.0.0.1:8080;# Proxy requests to the backend server running on localhost:8080\nproxy_set_header Host $host;# Set the Host header to the client's original host\nproxy_set_header X-Real-IP $remote_addr;# Set the X-Real-IP header to the client's IP address\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;# Append client's IP addresses to X-Forwarded-For header\nproxy_set_header X-Forwarded-Proto $scheme;# Set the X-Forwarded-Proto header to the client's protocol (http or https)\n}\n}\n\n```\n\n  3. **Test and reload Nginx:**\nTerminal window```\n\nsudonginx-t\nsudosystemctlreloadnginx\n\n```\n\n  4. Now, when you request `http://<server_ip>/api` it will return the following response:\n```\n\n{\"message\":\"server working\"}\n\n```\n\n\n\n## Summary\nIn this guide, we learned how to deploy a Node API with Nginx on Ubuntu server. We also learned how to configure Nginx as a reverse proxy.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 21, 2025\n[ PreviousNginx SSL Setup](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-ssl-setup/)[Next PostgreSQL & Docker](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#_top)\n  * [ Prerequisites ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#prerequisites)\n  * [ Installing Docker ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#installing-docker)\n  * [ Create Storage Directory ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#create-storage-directory)\n  * [ Docker Compose File ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#docker-compose-file)\n  * [ Environment Variables ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#environment-variables)\n  * [ Start the PostgreSQL Container ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#start-the-postgresql-container)\n  * [ Connect with PostgreSQL ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#connect-with-postgresql)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/#summary)\n\n\n# Setting Up PostgreSQL with Docker\nPostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable, SQL-compliant database management system that is used to handle large workloads. PostgreSQL is a popular choice for many developers and organizations due to its robust features, extensibility, and reliability.\nIn this tutorial, we will walk you through the process of setting up PostgreSQL on your system. In this modern age, you can take advantage of Docker to easily set up and run PostgreSQL on your local machine. Docker is a platform that allows you to package, distribute, and run applications in containers. It provides a lightweight and efficient way to run applications in isolated environments. Docker is available for Windows, macOS, and Linux, making it a versatile tool for developers.\nPlay\n## Prerequisites\nBefore you begin, you will need to have the following prerequisites:\n  * A system running Windows, macOS, or Linux\n  * Docker installed on your system\n  * Basic knowledge of using the command line\n\n\n## Installing Docker\nIf you don\u2019t have Docker installed on your system, you can download and install it from the official [Docker website](https://docs.docker.com/get-started/get-docker/). Follow the instructions provided on the website to install Docker on your system.\nOnce the docker is installed, you can verify the installation by running the following command in your terminal:\nTerminal window```\n\ndocker--version\n\n```\n\nThis command will display the version of Docker installed on your system.\n## Create Storage Directory\nNow that you have Docker installed, create a new directory for your PostgreSQL data. This directory will be used to store the data files for your PostgreSQL instance. I usually keep this directory in my project folder so that it is easy to manage.\n## Docker Compose File\nNow, create a new file named `compose.yml` in the same directory. This file will contain the configuration for your PostgreSQL container.\nInsert the following content into the `compose.yml` file:\ncompose.yml```\n\nservices:\ndb:\nimage:postgres:alpine\ncontainer_name:postgres\nrestart:always\nenvironment:\nPOSTGRES_DB:${DB_NAME}\nPOSTGRES_USER:${DB_USER}\nPOSTGRES_PASSWORD:${DB_PASSWORD}\nports:\n-${DB_PORT}:5432# make sure you don't have another container running on DB_PORT\nhealthcheck:\ntest:[\"CMD-SHELL\",\"pg_isready -d $${DB_NAME} -U $${DB_USER}\"]\ninterval:10s\ntimeout:30s\nretries:5\nvolumes:\n-./data/db:/var/lib/postgresql/data\nattach:false\nadminer:\nimage:adminer\nrestart:always\nports:\n-8080:8080\n\n```\n\nIn this configuration file, we define two services: `db` and `adminer`. The `db` service is responsible for running the PostgreSQL instance, while the `adminer` service is responsible for running the [**Adminer**](https://www.adminer.org/en/) web interface. It is a lightweight database management tool that allows you to interact with your databases through a web interface.\nThe `db` service uses the `postgres` image from the Docker Hub registry. We specify the volume mapping to store the data files in the `./data/db` directory. The `ports` section maps the container port `5432` to the host port `5432`, allowing you to access the PostgreSQL instance from your local machine.\nWe also set the environment variables `POSTGRES_DB`, `POSTGRES_USER`, and `POSTGRES_PASSWORD` to configure the database name, username, and password, respectively.\nThe `adminer` service uses the `adminer` image from the Docker Hub registry. We map the container port `8080` to the host port `8080` to access the [**Adminer**](https://www.adminer.org/en/) web interface.\n## Environment Variables\nTo configure the database name, username, and password, you can create a `.env` file in the same directory as the `compose.yml` file. Add the following content to the `.env` file:\n.env```\n\nDB_NAME=chai-db\nDB_USER=chaicode\nDB_PASSWORD=chaiaurcode\nDB_PORT=5432\n\n```\n\nReplace the values of `DB_NAME`, `DB_USER`, and `DB_PASSWORD` with your desired database name, username, and password, respectively.\n## Start the PostgreSQL Container\nNow that you have created the `compose.yml` file, you can start the PostgreSQL container by running the following command in the terminal:\nTerminal window```\n\ndockercomposeup-d\n\n```\n\nThis command will download the necessary images and start the PostgreSQL and Adminer containers in the background. You can verify that the containers are running by executing the following command:\nTerminal window```\n\ndockerps\n\n```\n\nThis command will display a list of running containers on your system. You should see the `db` and `adminer` containers listed in the output.\nYou can now access the Adminer web interface by opening a web browser and navigating to `http://localhost:8080`. In the login page, enter the database name, username, and password that you specified in the `compose.yml` file. You should now be able to interact with your PostgreSQL database through the [**Adminer**](https://www.adminer.org/en/) web interface.\n## Connect with PostgreSQL\nIf you want to connect with database url, you can use the following url:\n```\n\npostgresql://chaicode:chaiaurcode@localhost:5432/chai-db\n\n```\n\nThat\u2019s it! You have successfully set up PostgreSQL using Docker on your system. You can now start developing applications that use PostgreSQL as the backend database.\n## Summary\nIn this tutorial, we have learned how to set up PostgreSQL using Docker on your system. We have also learned how to connect with the database using the Adminer web interface.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 21, 2025\n[ PreviousDeploy Node API](https://docs.chaicode.com/youtube/chai-aur-devops/node-nginx-vps/)[Next PostgreSQL on VPS](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#_top)\n  * [ Install PostgreSQL ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#install-postgresql)\n  * [ Check PostgreSQL is running ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#check-postgresql-is-running)\n  * [ Use psql to connect to the database ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#use-psql-to-connect-to-the-database)\n  * [ List databases ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#list-databases)\n  * [ Create a database ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#create-a-database)\n  * [ List databases ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#list-databases-1)\n  * [ List tables ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#list-tables)\n  * [ Setup PostgreSQL server ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#setup-postgresql-server)\n  * [ Connection Settings ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#connection-settings)\n  * [ Restart the PostgreSQL server: ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#restart-the-postgresql-server)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-vps/#summary)\n\n\n# Setting Up PostgreSQL On VPS\nPostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable, SQL-compliant database management system that is used to handle large workloads. PostgreSQL is a popular choice for many developers and organizations due to its robust features, extensibility, and reliability.\nIn this tutorial, we will walk you through the process of setting up PostgreSQL on Ubuntu on a VPS.\n## Install PostgreSQL\nTerminal window```\n\nsudoaptupdate\nsudoaptinstallpostgresql\nsudoservicepostgresqlstart# start the service\n\n```\n\n## Check PostgreSQL is running\nTerminal window```\n\nsudoservicepostgresqlstatus\n\n```\n\nMake sure the service is running\n## Use psql to connect to the database\nTerminal window```\n\nsudo-upostgrespsql\n\n```\n\nThis will open a CLI where you can run SQL commands.\nAfter first launching psql, you may check the details of your connection by typing `\\conninfo` into the interpreter.\nTerminal window```\n\npostgres=# \\conninfo\nConnectiontodatabase\"postgres\"byuser\"postgres\".\nHost:localhost\nPort:5432\nUsername:postgres\nDatabase:postgres\nSSLoff\n\n```\n\n## List databases\nTerminal window```\n\npostgres=# \\l\nListofdatabases\nName|Owner|Encoding|Collate|Ctype|Accessprivileges\n----------+----------+----------+------------+------------+-----------------------\npostgres|postgres|UTF8|en_US.utf8|en_US.utf8|\ntemplate0|postgres|UTF8|en_US.utf8|en_US.utf8|=c/postgres+\n|||||postgres=CTc/postgres\ntemplate1|postgres|UTF8|en_US.utf8|en_US.utf8|=c/postgres+\n|||||postgres=CTc/postgres\n(3rows)\n\n```\n\n## Create a database\nTerminal window```\n\npostgres=# CREATE DATABASE mydb;\nCREATEDATABASE\n\n```\n\n## List databases\nTerminal window```\n\npostgres=# \\l\nListofdatabases\nName|Owner|Encoding|Collate|Ctype|Accessprivileges\n----------+----------+----------+------------+------------+-----------------------\nmydb|postgres|UTF8|en_US.utf8|en_US.utf8|\npostgres|postgres|UTF8|en_US.utf8|en_US.utf8|\ntemplate0|postgres|UTF8|en_US.utf8|en_US.utf8|=c/postgres+\n|||||postgres=CTc/postgres\ntemplate1|postgres|UTF8|en_US.utf8|en_US.utf8|=c/postgres+\n|||||postgres=CTc/postgres\n(4rows)\n\n```\n\n## List tables\nTerminal window```\n\npostgres=# \\dt\nListofrelations\nSchema|Name|Type|Owner\n-------+------+-------+----------\npublic|foo|table|postgres\npublic|bar|table|postgres\n(2rows)\n\n```\n\n## Setup PostgreSQL server\nOpen the file `/etc/postgresql/<version>/main/postgresql.conf` and add the following lines:\n```\n\nlisten_addresses = '*'\n\n```\n\nThis will allow connections from any IP address. This is not recommended for production environments.\n## Connection Settings\nAdd the following lines in `/etc/postgresql/<version>/main/pg_hba.conf`:\n```\n\n# Allow connections from any IP address\nhostallall       0.0.0.0/0        md5\n\n```\n\n## Restart the PostgreSQL server:\nTerminal window```\n\nsudoservicepostgresqlrestart\n# or\nsudosystemctlrestartpostgresql\n\n```\n\nThis server will be accessible at `localhost:5432` if your backend server is running on the same machine. If you are running the backend server on a different machine, you will need to configure the `host` and `port` settings in the `.env` file.\n## Summary\nIn this tutorial, we have learned how to set up PostgreSQL on Ubuntu on a VPS. We have also learned how to create a database, list tables and configure connection settings.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 22, 2025\n[ PreviousPostgreSQL & Docker](https://docs.chaicode.com/youtube/chai-aur-devops/postgresql-docker/)[Next Advance Node Logger](https://docs.chaicode.com/youtube/chai-aur-devops/node-logger/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/#_top)\n  * [ Prerequisites ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/#prerequisites)\n  * [ Installing Nginx on Ubuntu ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/#installing-nginx-on-ubuntu)\n  * [ Configuring Nginx on Ubuntu ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/#configuring-nginx-on-ubuntu)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/#summary)\n\n\n# Nginx Configuration on VPS\nNginx is a popular open-source web server that can be used to serve static files, dynamic content, and proxy requests to other servers. It is known for its high performance, scalability, and security.\nIn this tutorial, we will learn how to install and configure Nginx on any VPS.\nPlay\n## Prerequisites\nBefore installing Nginx, make sure you have the following prerequisites:\n  * A server with root access\n  * A domain name or IP address\n  * A web server that can be used to serve static files\n\n\n## Installing Nginx on Ubuntu\nTo install Nginx on Ubuntu, follow these steps:\n  1. **Update the package index**\nTerminal window```\n\nsudoaptupdate\n\n```\n\n  2. **Install Nginx**\nTerminal window```\n\nsudoaptinstallnginx\n\n```\n\n  3. **Start and enable Nginx**\nTerminal window```\n\nsudosystemctlstartnginx\nsudosystemctlenablenginx\n\n```\n\n  4. Open your web browser and navigate to `http://your_server_ip`. You should see the Nginx default welcome page.\n\n\n## Configuring Nginx on Ubuntu\n  1. Create a new server block configuration file\nTerminal window```\n\nsudovim/etc/nginx/sites-available/default\n\n```\n\n_This command opens the default configuration file for editing._\n  2. Replace the file content with the following content:\n```\n\nserver {\nlisten 80;# Listen on port 80, the default HTTP port\nserver_name localhost;# The server name, here it is set to localhost\nroot /var/www/html;# The root directory where files are served from\nindex index.html index.htm;# The default files to serve\nlocation/ {\ntry_files $uri$uri/ =404;# Try to serve the requested URI, if not found return a 404\n}\n}\n\n```\n\n  3. Create the document root directory if it doesn\u2019t exist\nTerminal window```\n\nsudomkdir-p/var/www/html\n\n```\n\n  4. Change ownership of the document root directory to the current user\nTerminal window```\n\nsudochown-R$USER:$USER/var/www/html\n\n```\n\n  5. Set the permissions for the document root directory\nTerminal window```\n\nsudochmod-R755/var/www/html\n\n```\n\n  6. Create the directory for the web root.\nTerminal window```\n\ncd/var/www/html\n\n```\n\n_This command navigates to the web root directory._\n  7. Create an empty index.html file\nTerminal window```\n\ntouchindex.html\n\n```\n\n_This command creates an empty index.html file._\n  8. Open the index.html file for editing\nTerminal window```\n\nsudovimindex.html\n\n```\n\n_This command opens the index.html file for editing._\n  9. Add the following content to the index.html file:\n```\n\n<html>\n<head>\n<title>Welcome to Nginx</title>\n</head>\n<body>\n<h1>Hello, world!</h1>\n</body>\n</html>\n\n```\n\n  10. Test the Nginx configuration\nTerminal window```\n\nsudonginx-t\n\n```\n\n_This command tests the Nginx configuration for syntax errors._\n  11. Reload Nginx to apply the changes\nTerminal window```\n\nsudosystemctlreloadnginx\n\n```\n\n_This command reloads the Nginx service to apply the changes._\n  12. Open your web browser and navigate to `URL_ADDRESS_server_ip`. You should see the Nginx default welcome page.\n\n\n## Summary\nIn this tutorial, we learned how to install and configure Nginx to serve static files.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 21, 2025\n[ PreviousServer Startup](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/)[Next Nginx Rate Limit](https://docs.chaicode.com/youtube/chai-aur-devops/nginx-rate-limiting/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#_top)\n  * [ Server Selection ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#server-selection)\n  * [ Server Configuration ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#server-configuration)\n  * [ OS Configuration ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#os-configuration)\n  * [ Get an account on any cloud provider ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#get-an-account-on-any-cloud-provider)\n  * [ Change password (optional) ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#change-password-optional)\n  * [ Add Non-root User ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#add-non-root-user)\n  * [ Connect to the server using SSH ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#connect-to-the-server-using-ssh)\n  * [ Disable password login ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#disable-password-login)\n  * [ Firewall Configuration ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#firewall-configuration)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/#summary)\n\n\n# Setting up VPC for deployment\nIn this tutorial, we will learn how to set up a server for hosting. We will cover topics such as server selection, server configuration, and server hardening.\nPlay\n## Server Selection\nBefore setting up a server, it\u2019s important to choose the right server for your needs. There are several factors to consider when selecting a server, including:\n  * Budget: Determine how much you can afford to spend on a server.\n  * Purpose: Decide what you want to use the server for, such as hosting a website, running a business, or running a development environment.\n  * Location: Choose a server that is close to your users and has good connectivity.\n  * Security: Ensure that the server is secure and protected against potential threats.\n\n\n## Server Configuration\nOnce you have chosen a server, you need to configure it properly. This involves setting up the server\u2019s operating system, configuring the server\u2019s network settings, and setting up any necessary software or applications.\n## OS Configuration\nThe first step in configuring a server is to set up the operating system. This involves installing the operating system and any necessary software packages. Here are some steps to follow:\n  1. **Choose an operating system**\nSelect an operating system that is compatible with your needs and budget. Some popular options include Ubuntu, CentOS, and Debian.\n  2. **Update the operating system**\nUse a package manager like `apt` or `yum` to update the operating system on the server.\n  3. **Configure the network settings**\nSet up the network settings, such as IP address, subnet mask, and gateway, to ensure that the server can communicate with other devices on the network.\n  4. **Install any necessary software**\nInstall any necessary software packages, such as web servers, database servers, or development tools, on the server.\n\n\n## Get an account on any cloud provider\nWe will use [Linode](https://www.linode.com/) as our cloud provider. [Linode](https://www.linode.com/) is a cloud hosting provider that offers a wide range of virtual private servers (VPS) with varying configurations and prices. It is a popular choice for hosting web applications and other types of software.\nOnce the account is created, you can choose the plan that best suits your needs. The plan will determine the number of servers you can create, the amount of storage space available, and the price per month.\nOnce the machine is created and up and running, you can connect to it using your terminal, in my case I am using [warp](https://www.warp.dev/) terminal. You can use [warp](https://www.warp.dev/) to connect to your machine and manage it remotely.\nTerminal window```\n\nsshroot@192.IP.IP.IP\n\n```\n\nNow we are inside our machine and we can start installing the necessary packages and software but before that let\u2019s upgrade our system.\nTerminal window```\n\naptupdate\naptupgrade\naptupdate\n\n```\n\nAlways run the `apt update` command before `apt upgrade` to ensure that you have the latest packages available.\n## Change password (optional)\nAlthough most cloud providers offer a way to change the password of your machine directly from the control panel but in case you want to do it manually, you can use the following command:\nTerminal window```\n\npasswd\n\n```\n\nThis will prompt you to enter your current password and then you will be prompted to enter a new password. Once you have entered the new password, you will be prompted to confirm it. After that, the password will be changed.\n## Add Non-root User\nTo add a non-root user, you can use the following command:\nTerminal window```\n\nuseradd-m-s/bin/bashusername\ngroupsusername\n\n```\n\nThis will create a new user with the specified username and you can check the groups of the user using the `groups` command. After that, you can add the user to the sudoers group using the following command:\nTerminal window```\n\nusermod-aGsudousername\n\n```\n\nThis will add the user to the sudoers group, giving them the ability to run commands with sudo privileges. Now lets create a password for the user:\nTerminal window```\n\nsudopasswdusername\n\n```\n\nThis will prompt you to enter a new password for the user. After that, you can log in as the user using the following command:\nTerminal window```\n\nsshusername@192.IP.IP.IP\n\n```\n\nFinally, logged in as the user.\n## Connect to the server using SSH\nSetting up SSH key on your machine is fairly easy and you need to do it once. You can generate it once as your machine identification and then you can use it to connect to the server. Here is a link to the [official documentation](https://www.linode.com/docs/guides/use-public-key-authentication-with-ssh/?tabs=ed25519-recommended%2Cssh-add%2Cusing-ssh-copy-id-recommended) on how to generate SSH keys on Linux and MacOS.\nHere are some simple steps to follow:\nTerminal window```\n\nssh-keygen-ted25519-C\"user@domain.tld\"\n\n```\n\nto view the public key\nTerminal window```\n\ncat~/.ssh/id_ed25519.pub\n\n```\n\nOnce you have generated the SSH keys, you can add them to your server using the following command (assuming you have copied the public key to your clipboard):\nOn your server, run the following command to copy the public key to the server. Create a new directory called `.ssh` in your home directory if it doesn\u2019t already exist. Then create a new file called `authorized_keys` in the `.ssh` directory and paste the public key into the file.\nTerminal window```\n\nnano~/.ssh/authorized_keys\n\n```\n\nPaste the public key into the file.\nadd it to the ssh utility\nTerminal window```\n\nssh-add-k~/.ssh/id_ed25519\n\n```\n\n## Disable password login\nAfter this, no one will be able to log in to your server using the username and password. Be careful with this.\nTerminal window```\n\nsudonano/etc/ssh/sshd_config\n\n```\n\nOpen this file in nano editor and search for `PasswordAuthentication` and change it to `no`. Optionally, you can also change the `PermitRootLogin` to `no` to prevent root user from logging in.\nNow, restart the ssh service using the following command:\nTerminal window```\n\nsudoservicesshrestart\n\n```\n\n## Firewall Configuration\nYou can install firewall package to protect your server from external attacks. In my case I will use linode firewall that I can easily configure from the control panel. Some people prefer to use ufw (Uncomplicated Firewall) which is a simple and easy to use firewall.\nTo install ufw, run the following command:\nTerminal window```\n\nsudoaptinstallufw\n\n```\n\nOnce the package is installed, you can configure the firewall using the following command:\nTerminal window```\n\nsudoufwstatus\n\n```\n\nThis will show the current status of the firewall. To enable the firewall, run the following command:\nTerminal window```\n\nsudoufwenable\n\n```\n\nThis will enable the firewall and allow all incoming and outgoing traffic. To allow incoming traffic on a specific port, run the following command:\nTerminal window```\n\nsudoufwallow<port>\n\n```\n\nFor example, to allow incoming traffic on port 22, run the following command:\nTerminal window```\n\nsudoufwallow22\n\n```\n\nTo allow incoming traffic on multiple ports, run the following command:\nTerminal window```\n\nsudoufwallow<port1>,<port2>,<port3>\n\n```\n\nFor example, to allow incoming traffic on ports 22, 80, and 443, run the following command:\nTerminal window```\n\nsudoufwallow22,80,443\n\n```\n\n## Summary\nIn this tutorial, we have learned how to set up a server for hosting. We have covered topics such as server selection, server configuration, and server hardening.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 20, 2025\n[ PreviousWelcome](https://docs.chaicode.com/youtube/chai-aur-devops/welcome/)[Next Nginx Configuration](https://docs.chaicode.com/youtube/chai-aur-devops/setup-nginx/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-devops/welcome/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-devops/welcome/#_top)\n\n\n# Welcome\nHaanji! Swagat hai **Chai aur Docs** mein. \ud83c\udf89\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Deploy To Production** \u201d series on the [Hitesh Choudhary](https://www.youtube.com/@HiteshCodeLab) YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nPlay\nLet\u2019s begin with the basics in the next section\u2026\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 20, 2025\n[ PreviousExercise - Joins](https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/)[Next Server Startup](https://docs.chaicode.com/youtube/chai-aur-devops/setup-vpc/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-django/getting-started/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#_top)\n  * [ What is Django? ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#what-is-django)\n  * [ Environment Setup ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#environment-setup)\n  * [ Django Project ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#django-project)\n  * [ Start a Django Server ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#start-a-django-server)\n  * [ Creating our first views ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#creating-our-first-views)\n  * [ Adding Templates ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#adding-templates)\n  * [ Adding CSS and JavaScript ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#adding-css-and-javascript)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#summary)\n\n\n# Getting Started\nDjango is popular framework amongst python developers and used by many large companies, including Google, Facebook, and Instagram.\nIn this guide, we will learn how to create a Django project, create a view, create a template, and add CSS and JavaScript to our project. We will also learn how to run the server and view the output.\n## What is Django?\nDjango is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. It takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel.\nDjango is a full-featured web framework that follows the Model-View-Controller (MVC) architectural pattern. It provides a set of tools and libraries for building web applications, including an ORM, a templating engine, and a built-in admin interface.\n## Environment Setup\nTo get started with Django, you\u2019ll need to install it on your computer. You can do this by running the following command in your terminal, after setting up a virtual environment:\n  * [ MacOS ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#tab-panel-154)\n  * [ Windows ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#tab-panel-155)\n  * [ Linux ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#tab-panel-156)\n\n\nTerminal window```\n\npython3-mvenv.venv\n# to activate the virtual environment\nsource.venv/bin/activate\n\n```\n\nTerminal window```\n\npython-mvenv.venv\n# to activate the virtual environment\n.venv\\Scripts\\activate\n\n```\n\nTerminal window```\n\npython3-mvenv.venv\n# to activate the virtual environment\nsource.venv/bin/activate\n\n```\n\nThis is regular way but these days I am using [**uv**](https://docs.astral.sh/uv/) to manage virtual environment and other tools. It\u2019s ridiculously easy and fast and cross-platform.\n  * [ MacOS ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#tab-panel-157)\n  * [ Windows ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#tab-panel-158)\n  * [ Linux ](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/#tab-panel-159)\n\n\nTerminal window```\n\nbrewinstalluv\n# to create a virtual environment\nuvvenv\n# to activate the virtual environment\nsource.venv/bin/activate\n\n```\n\nTerminal window```\n\npowershell-c\"irm https://astral.sh/uv/install.ps1 | iex\"\n# to create a virtual environment\nuvvenv\n# to activate the virtual environment\n.venv\\Scripts\\activate\n\n```\n\nTerminal window```\n\npipinstalluv\n# to create a virtual environment\nuvvenv\n# to activate the virtual environment\nsource.venv/bin/activate\n\n```\n\nNow for all installations, you can use `uv pip install` command. For example, to install Django, run the following command:\nTerminal window```\n\nuvpipinstalldjango\nuvpipinstall-rrequirements.txt\n\n```\n\n## Django Project\nA Django project is a collection of settings and configurations that define the structure and behavior of a web application. It includes the code for the application, as well as the templates, static files, and other resources that make up the application.\nTo create a new Django project, you can use the following command:\nTerminal window```\n\ndjango-adminstartprojectchai-aur-django\ncdchai-aur-django\n\n```\n\nThis will create a new directory called `chai-aur-django` with the basic structure of a Django project.\n## Start a Django Server\nTo start the Django server, you can use the following command:\nTerminal window```\n\npythonmanage.pyrunserver\n\n```\n\nThis will start the server and make it accessible at [**localhost:8000**](http://localhost:8000).\nIgnore the unapplied migrations warning. This is a common issue when starting a new Django project. We will address this in a later section.\n## Creating our first views\nCreate a new file called `views.py` in the `chai-aur-django` directory. In this file, we will define a few views that are simple functions that return a response. We want to have home page, about page, and contact page. Each of these pages will return html content.\nviews.py```\n\nfrom django.http import HttpResponse\ndefhome(request):\nreturnHttpResponse(\"<h1>Welcome to Chai's Django Project: Home page</h1>\")\ndefabout(request):\nreturnHttpResponse(\"<h1>Welcome to Chai's Django Project: About page</h1>\")\ndefcontact(request):\nreturnHttpResponse(\"<h1>Welcome to Chai's Django Project: Contact page</h1>\")\n\n```\n\nNow, let\u2019s create a new file called `urls.py` in the `chai-aur-django` directory. In this file, we will define the URL patterns for our application. If the file is already there, you can just add the following code to the end of the file:\nurls.py```\n\nfrom django.urls import path\nfrom.import views\nurlpatterns =[\npath('', views.home,name='home'),\npath('about/', views.about,name='about'),\npath('contact/', views.contact,name='contact'),\n]\n\n```\n\nNow, let\u2019s run the server again and visit the following URLs:\n  * [**localhost:8000**](http://localhost:8000)\n  * [**localhost:8000/about**](http://localhost:8000/about)\n  * [**localhost:8000/contact**](http://localhost:8000/contact)\n\n\nYou should see the following output:\n```\n\nWelcome to Chai's Django Project: Home page\nWelcome to Chai's Django Project: About page\nWelcome to Chai's Django Project: Contact page\n\n```\n\n## Adding Templates\nIn Django, templates are used to generate HTML pages. They are used to display data and perform logic in a web application. To create a template, you can create a new file called `templates/index.html` in the `chai-aur-django` directory. Make sure that template folder is at same level as `manage.py` file. In this file, you can write HTML code that will be used to generate the HTML page.\ntemplates/index.html```\n\n<!DOCTYPEhtml>\n<html>\n<head>\n<title>Welcome to Chai's Django Project</title>\n</head>\n<body>\n<h1>Welcome to Chai's Django Project</h1>\n</body>\n</html>\n\n```\n\nNow, let\u2019s run the server again and visit the **<http://localhost:8000/>** URL. You should see the following output:\n```\n\nWelcome to Chai's Django Project\n\n```\n\n## Adding CSS and JavaScript\nTo add CSS and JavaScript to your Django project, you can create a new file called `static/css/style.css` in the `chai-aur-django` directory. In this file, you can write CSS code that will be used to style the HTML page. You can also create a new file called `static/js/script.js` in the `chai-aur-django` directory. In this file, you can write JavaScript code that will be used to add interactivity to the HTML page.\nstatic/css/style.css```\n\nbody{\nbackground-color:#161616;\nfont-family:Arial,sans-serif;\ncolor:#fff;\n}\n\n```\n\nstatic/js/script.js```\n\nconsole.log(\"Hello, world!\");\n\n```\n\nTo add this css file go to `settings.py` and add the following line:\nsettings.py```\n\nimport os\n'DIRS':['templates'],# inside template section\nSTATIC_URL='/static/'# below this add the following line\nSTATICFILES_DIRS=[os.path.join(BASE_DIR,'static')]\n\n```\n\nIn the `index.html` file, add the following line at the top of the file:\n```\n\n{% load static %}\n\n```\n\n```\n\n<linkrel=\"stylesheet\"href=\"{% static 'css/style.css' %}\">\n\n```\n\nNow, let\u2019s change the `home` view to use the new template:\n```\n\nfrom django.shortcuts import render\ndefhome(request):\nreturnrender(request,'index.html')\n\n```\n\nNow, let\u2019s run the server again and visit the [localhost:8000](http://localhost:8000/) URL. You should see the following output:\n```\n\nWelcome to Chai's Django Project\n\n```\n\n## Summary\nIn this tutorial, we have learned how to create a Django project, create a view, create a template, and add CSS and JavaScript to our project. We have also learned how to run the server and view the output. This is the end of the first part of the tutorial. We will surely have more fun in the next part. Keep enjoying Chai aur Django!\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 18, 2025\n[ PreviousWelcome](https://docs.chaicode.com/youtube/chai-aur-django/welcome/)[Next Jinja Templates App](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#_top)\n  * [ Installation ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#installation)\n  * [ Common Template Tags ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#common-template-tags)\n    * [ % if % ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#--if)\n    * [ {% for %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-for)\n    * [ {% block %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-block)\n    * [ {% include %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-include)\n    * [ {% extends %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-extends)\n    * [ {% load %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-load)\n    * [ {% static %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-static)\n    * [ {% url %} ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#-url)\n  * [ Apps in Django ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#apps-in-django)\n    * [ Templates in Apps and layout extension ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#templates-in-apps-and-layout-extension)\n  * [ Common Layout for all pages ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#common-layout-for-all-pages)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/#summary)\n\n\n# Jinja Templates App in Django\nJinja2 is a template engine for Python. It is used in Django to render templates. It is a very powerful template engine that can be used to render HTML, XML, and other formats. It is also used to render templates for the Django admin interface.\n## Installation\nIf you are in Django, you don\u2019t need to install Jinja2 separately. It is already installed with Django. Django also comes with a built-in template configurations that allows you to use Jinja2 templates.\nJinja2 templates are written in a simple text format called HTML. The syntax is very similar to HTML, but with some additional features. You need to inject variables into the template using the `{{ variable }}` syntax. For example, if you want to display a name, you can use the following code:\n```\n\nHello {{ name }}!\n\n```\n\nThis will display the name of the person who is currently logged in, if there is one.\n## Common Template Tags\nFollowing are some of the common template tags that you can use in Jinja2 templates:\n### ` % if %`\nThe `{% if %}` tag is used to conditionally display content in a template. It takes a boolean expression as an argument, and if the expression evaluates to `True`, the content inside the tag will be displayed. If the expression evaluates to `False`, the content will be skipped.\nFor example, the following code will display a greeting message only if the `name` variable is not empty:\n```\n\n{% if name %}\nHello, {{ name }}!\n{% endif %}\n\n```\n\n### `{% for %}`\nThe `{% for %}` tag is used to iterate over a sequence of items. It takes a variable name and a sequence as arguments, and displays the content inside the tag for each item in the sequence.\nFor example, the following code will display a list of names:\n```\n\n{% for name in names %}\n{{ name }} is a name.\n{% endfor %}\n\n```\n\n### `{% block %}`\nThe `{% block %}` tag is used to define a block of content that can be overridden in child templates. It takes a name as an argument, and defines a block with that name that can be overridden in child templates.\nFor example, the following code defines a base template that includes a header and a footer:\n```\n\n<!DOCTYPEhtml>\n<html>\n<head>\n<title>{% block title %}My Website{% endblock %}</title>\n</head>\n<body>\n{% block content %}\n<h1>Welcome to my website!</h1>\n{% endblock %}\n<footer>\n{% block footer %}\n<p>Copyright \u00a9 2021</p>\n{% endblock %}\n</footer>\n</body>\n</html>\n\n```\n\nAnd the following code defines a child template that overrides the `content` block:\n```\n\n{% extends \"base.html\" %}\n{% block title %}My Website{% endblock %}\n{% block content %}\n<h1>Welcome to my website!</h1>\n<p>This is a child template.</p>\n{% endblock %}\n\n```\n\nIn this example, the `content` block in the child template overrides the `content` block in the base template, and the `title` block is not overridden.\n### `{% include %}`\nThe `{% include %}` tag is used to include the contents of another template file. It takes a template name as an argument, and includes the contents of the template file in the current template.\nFor example, the following code includes the contents of a template file called `header.html`:\n```\n\n{% include \"header.html\" %}\n\n```\n\nThis will include the contents of the `header.html` template file in the current template.\n### `{% extends %}`\nThe `{% extends %}` tag is used to extend a base template. It takes a template name as an argument, and extends the base template with the contents of the template file.\nFor example, the following code extends the `base.html` template with the contents of a template file called `child.html`:\n```\n\n{% extends \"base.html\" %}\n{% block content %}\n<h1>Welcome to my website!</h1>\n<p>This is a child template.</p>\n{% endblock %}\n\n```\n\nIn this example, the `content` block in the child template overrides the `content` block in the base template, and the `title` block is not overridden.\n### `{% load %}`\nThe `{% load %}` tag is used to load a template tag library. It takes a library name as an argument, and loads the template tag library with that name.\nFor example, the following code loads the `static` template tag library:\n```\n\n{% load static %}\n\n```\n\nThis will load the `static` template tag library, which provides a set of template tags for working with static files.\n### `{% static %}`\nThe `{% static %}` tag is used to include a static file in a template. It takes a file path as an argument, and includes the contents of the file in the current template.\nFor example, the following code includes the contents of a CSS file called `style.css`:\n```\n\n<linkrel=\"stylesheet\"href=\"{% static 'style.css' %}\">\n\n```\n\nThis will include the contents of the `style.css` file in the current template.\n### `{% url %}`\nThe `{% url %}` tag is used to generate a URL for a view. It takes a view name and a set of arguments as arguments, and generates a URL for the view with those arguments.\nFor example, the following code generates a URL for the `index` view with the `name` argument set to `'John'`:\n```\n\n<ahref=\"{% url 'index' name='John' %}\">Go to the home page</a>\n\n```\n\nThis will generate a link to the home page with the `name` argument set to `'John'`.\n## Apps in Django\nThe most common way to organize your Django project is to use apps. An app is a self-contained module that contains models, views, templates, and other components of your project. Apps allow you to organize your code into logical units and make it easier to manage and maintain your project.\nYou can create it manually or use the `startapp` command to create a new app for you. To create an app, navigate to the directory where you want to create the app and run the following command:\nTerminal window```\n\npythonmanage.pystartappchai\n\n```\n\nThis will create a new directory called `chai` with the necessary files and directories for an app.\nTo add an app to your project, you need to add it to the `INSTALLED_APPS` setting in your project\u2019s `settings.py` file. You can do this by adding the app\u2019s name to the list of installed apps:\n```\n\nINSTALLED_APPS=[\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n'chai',\n]\n\n```\n\nThis will add the `chai` app to your project\u2019s installed apps.\n### Templates in Apps and layout extension\nIn Django, templates are organized into apps. Each app can have its own templates directory, which contains the templates for that app. Create a new directory called `templates` in your app\u2019s directory. Inside the chai directory, create a `templates` directory and add a `all_chai.html` file to it.\nAdd your basic html code to the `all_chai.html` file.\nTo serve this file, we need a view and a url. Create a new file called `views.py` in your app\u2019s directory. Add the following code to the file:\nviews.py```\n\nfrom django.shortcuts import render\ndefall_chai(request):\nreturnrender(request,'all_chai.html')\n\n```\n\nThis view will render the `all_chai.html` template when it is called.\nCreate a new file called `urls.py` in your app\u2019s directory. Add the following code to the file:\nurls.py```\n\nfrom django.urls import path\nfrom.import views\nurlpatterns =[\npath('', views.all_chai,name='all_chai'),\n]\n\n```\n\nThis urlpattern will map the root URL of the app to the `all_chai` view.\nNow, we need to make aware of this new urlpattern in our project\u2019s `urls.py` file. Add the following code to the project\u2019s `urls.py` file:\nurls.py```\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns =[\npath('admin/', admin.site.urls),\npath('chai/',include('chai.urls')),\n]\n\n```\n\nThis will include the `chai.urls` file in the project\u2019s urlpatterns.\nNow, we can access the `all_chai` view by going to `http://localhost:8000/chai/`.\n## Common Layout for all pages\nIn Django, you can create a common layout for all pages in your project by using the `base.html` template. Create a new file called `base.html` in your project\u2019s templates directory. Add the following code to the file:\nbase.html```\n\n{% load static %}\n<!DOCTYPEhtml>\n<htmllang=\"en\">\n<head>\n<metacharset=\"UTF-8\">\n<metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">\n<linkrel=\"stylesheet\"href=\"{% static 'style.css' %}\">\n<title>\n{% block title %}\nChai aur Django\n{% endblock title %}\n</title>\n</head>\n<body>\n<nav>I will add it later</nav>\n{% block content %}\n{% endblock %}\n</body>\n</html>\n\n```\n\nNow, this layout can be used for all pages in your project. To use it, you need to include it in your templates. For example, if you want to use the layout for the `all_chai` view, you can add the following code to the `all_chai.html` file:\nall_chai.html```\n\n{% extends \"base.html\" %}\n{% block title %}\nAll Chai\n{% endblock %}\n{% block content %}\n<h1>All Chai</h1>\n<p>This is the all chai page.</p>\n{% endblock %}\n\n```\n\nThis will use the `base.html` layout and override the `title` and `content` blocks with the appropriate values for the `all_chai` view.\n## Summary\nIn this part, we learned about Jinja2 templates and how to use them in Django. We also learned about apps in Django and how to create a common layout for all pages in your project. By using Jinja2 templates and apps, you can create dynamic and reusable templates in Django that make your web development process more efficient and enjoyable.\nFollow chai aur Django to learn more about Django and its features on youtube.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 18, 2025\n[ PreviousDjango Intro](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/)[Next Tailwind Integration](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-django/models/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-django/models/#_top)\n  * [ Defining a Model ](https://docs.chaicode.com/youtube/chai-aur-django/models/#defining-a-model)\n  * [ Adding Data to DB ](https://docs.chaicode.com/youtube/chai-aur-django/models/#adding-data-to-db)\n  * [ Create a View ](https://docs.chaicode.com/youtube/chai-aur-django/models/#create-a-view)\n  * [ Get Data in Template ](https://docs.chaicode.com/youtube/chai-aur-django/models/#get-data-in-template)\n  * [ Add Description ](https://docs.chaicode.com/youtube/chai-aur-django/models/#add-description)\n  * [ Add a Details View ](https://docs.chaicode.com/youtube/chai-aur-django/models/#add-a-details-view)\n  * [ Configure urls.py ](https://docs.chaicode.com/youtube/chai-aur-django/models/#configure-urlspy)\n  * [ Create chai_detail.html Template ](https://docs.chaicode.com/youtube/chai-aur-django/models/#create-chai_detailhtml-template)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-django/models/#summary)\n\n\n# Django Models\nDjango models are the heart of the Django framework. They are used to define the structure of the database and the relationships between different models. In this section, we will explore the basics of Django models and how to create them.\n## Defining a Model\nSo far, we have created a same chai app and it\u2019s time to add some data to it. To do this, we need to define a model. A model is a Python class that represents a table in the database. It contains fields that define the structure of the table and methods that define the behavior of the table.\nTo define a model, we need to use the `models.py` file in our Django project. Add the following code to the `models.py` file:\nmodels.py```\n\nfrom django.db import models\nfrom django.utils import timezone\n# Create your models here.\nclassChaiVariety(models.Model):\nCHAI_TYPE_CHOICES=[\n('ML','MASALA'),\n('GR','GINGER'),\n('KL','KIWI'),\n('PL','PLAIN'),\n('EL','ELAICHI'),\n]\nname = models.CharField(max_length=100)\nimage = models.ImageField(upload_to='chais/')\ndate_added = models.DateTimeField(default=timezone.now)\ntype= models.CharField(max_length=2,choices=CHAI_TYPE_CHOICES,default='ML')\ndef__str__(self):\nreturnself.name\n\n```\n\nIn this code, we have defined a `ChaiVariety` model with the following fields:\n  * `name`: A `CharField` that stores the name of the chai variety.\n  * `image`: An `ImageField` that stores the image of the chai variety.\n  * `date_added`: A `DateTimeField` that stores the date and time when the chai variety was added.\n  * `type`: A `CharField` that stores the type of the chai variety (e.g., \u2018ML\u2019, \u2018GR\u2019, \u2018KL\u2019, \u2018PL\u2019, \u2018EL\u2019).\n  * `description`: A `TextField` that stores the description of the chai variety.\n\n\nThe `__str__` method is used to return a string representation of the object. In this case, it returns the name of the chai variety.\nSince we are using image field, we need to install `Pillow` library to use it.\nTerminal window```\n\npython-mpipinstallPillow\n\n```\n\nThen we need add some settings to our `settings.py` file to use the image field.\nsettings.py```\n\nMEDIA_URL='/media/'\nMEDIA_ROOT= os.path.join(BASE_DIR,'media')\n\n```\n\nNow, let\u2019s configure our projects `urls.py` file to reflect media files.\nurls.py```\n\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nurlpatterns =[\npath('admin/', admin.site.urls),\n#...\n#...\n]+static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)\n\n```\n\n## Adding Data to DB\nNow that we have defined our model, we can add some data to the database. Lets migrate the database and add some data to the `ChaiVariety` model.\nTerminal window```\n\npythonmanage.pymakemigrationschai\npythonmanage.pymigrate\n\n```\n\nNow, let\u2019s add some data to the database. You can go to `admin.py` file and add the following code to the `ChaiVariety` model.\nadmin.py```\n\nfrom django.contrib import admin\nfrom.models import ChaiVariety\nadmin.site.register(ChaiVariety)\n\n```\n\nNow, go to the admin page and you should see the `ChaiVariety` model listed. Add some data to the model and save it.\n## Create a View\nNow that we have added some data to the database, we can create a view to display the data. Go to the `views.py` file and add the following code.\n```\n\ndefall_chai(request):\nchais = ChaiVariety.objects.all()\nreturnrender(request,'chai/all_chai.html',{'chais': chais})\n\n```\n\n## Get Data in Template\nIn the `all_chai.html` template, we can use the `chais` variable to display the data. Add the following code to the `all_chai.html` template.\n```\n\n{% for chai in chais %}\n<divclass=\"chai-item\">\n<imgsrc=\"{{ chai.image.url }}\"alt=\"{{ chai.name }}\">\n<h3>{{ chai.name }}</h3>\n<p>{{ chai.description }}</p>\n</div>\n{% endfor %}\n\n```\n\n## Add Description\nWe can add a description to the `ChaiVariety` model by adding a `description` field to the model. Add the following code to the `models.py` file.\nmodels.py```\n\nclassChaiVariety(models.Model):\nCHAI_TYPE_CHOICES=[\n('ML','MASALA'),\n('GR','GINGER'),\n('KL','KIWI'),\n('PL','PLAIN'),\n('EL','ELAICHI'),\n]\nname = models.CharField(max_length=100)\nimage = models.ImageField(upload_to='chais/')\ndate_added = models.DateTimeField(default=timezone.now)\ntype= models.CharField(max_length=2,choices=CHAI_TYPE_CHOICES,default='ML')\ndescription = models.TextField(default='')\ndef__str__(self):\nreturnself.name\n\n```\n\n## Add a Details View\nNow that we have added a description to the `ChaiVariety` model, we can create a view to display the details of a specific chai variety. Go to the `views.py` file and add the following code.\nviews.py```\n\nfrom django.shortcuts import render, get_object_or_404\ndefchai_detail(request,chai_id):\nchai =get_object_or_404(ChaiVariety,pk=chai_id)\nreturnrender(request,'chai/chai_detail.html',{'chai': chai})\n\n```\n\nIn the `all_chai.html` template, we can use the url to display the details of a specific chai variety.\nall_chai.html```\n\n{% for chai in chais %}\n<divclass=\"chai-item\">\n<imgsrc=\"{{ chai.image.url }}\"alt=\"{{ chai.name }}\">\n<h3>{{ chai.name }}</h3>\n<p>{{ chai.description }}</p>\n<ahref=\"{% url 'chai_detail' chai.id %}\">Details</a>\n</div>\n{% endfor %}\n\n```\n\n## Configure urls.py\nNow that we have created a view to display the details of a specific chai variety, we need to configure the urls.py file to reflect this. Go to the `urls.py` file and add the following code.\nurls.py```\n\nfrom django.urls import path\nfrom.import views\nurlpatterns =[\npath('', views.all_chai,name='all_chai'),\npath('<int:chai_id>/', views.chai_detail,name='chai_detail'),\n]\n\n```\n\n## Create `chai_detail.html` Template\nNow that we have created a view to display the details of a specific chai variety, we need to create a template to display the details. Go to the `chai` folder and create a new file called `chai_detail.html`. Add the following code to the `chai_detail.html` template.\nchai_detail.html```\n\n<h1>{{ chai.name }}</h1>\n<p>{{ chai.description }}</p>\n<imgsrc=\"{{ chai.image.url }}\"alt=\"{{ chai.name }}\">\n\n```\n\n## Summary\nIn this section, we have learned how to create a model, add data to the database, create a view to display the data, and create a view to display the details of a specific chai variety. We have also learned how to configure the urls.py file to reflect the views and how to create a template to display the details.\nWith these concepts, we can create a complete web application that allows users to add and view chai varieties.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 18, 2025\n[ PreviousTailwind Integration](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/)[Next Relationships & Forms](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#_top)\n  * [ One-to-many ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#one-to-many)\n  * [ Many-to-many ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#many-to-many)\n  * [ One-to-one ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#one-to-one)\n  * [ Update the admin ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#update-the-admin)\n  * [ Adding a form on frontend ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#adding-a-form-on-frontend)\n  * [ Handle the view for the form ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#handle-the-view-for-the-form)\n  * [ Add the template ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#add-the-template)\n  * [ Update the urls ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#update-the-urls)\n  * [ Run the server ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#run-the-server)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/#summary)\n\n\n# Relationships and Forms in Django\nDjango has a number of built-in relationships that you can use to connect your models to each other. These relationships are used to create a more complex and powerful database.\nThe most common relationships are:\n  * One-to-many\n  * Many-to-many\n  * One-to-one\n\n\n## One-to-many\nOne-to-many relationships are used when you have a model that has a foreign key to another model. In a One-to-Many relationship, each instance of the parent model can be associated with multiple instances of the child model. For example, a Chai variety can have multiple reviews.\nIn the existing `chai` app, open `models.py` and add the following code:\nmodels.py```\n\nclassChaiReview(models.Model):\nchai = models.ForeignKey(ChaiVariety,on_delete=models.CASCADE,related_name='reviews')\nuser = models.ForeignKey(User,on_delete=models.CASCADE)\nrating = models.IntegerField()\ncomment = models.TextField()\ndate_added = models.DateTimeField(default=timezone.now)\ndef__str__(self):\nreturnf'{self.user.username} review for {self.chai.name}'\n\n```\n\nThis code creates a new model called `ChaiReview` that has a foreign key to the `ChaiVariety` model. The `user` field is a foreign key to the `User` model, and the `rating` and `comment` fields are integers and text fields respectively.\n## Many-to-many\nMany-to-many relationships are used when you have a model that has a many-to-many relationship with another model. In a Many-to-Many relationship, each instance of one model can be associated with multiple instances of another model, and vice versa. For example, a Chai variety can be featured in multiple stores, and each store can feature multiple chai varieties.\nIn the existing `chai` app, open `models.py` and add the following code:\nmodels.py```\n\nclassStore(models.Model):\nname = models.CharField(max_length=100)\nlocation = models.CharField(max_length=100)\nchai_varieties = models.ManyToManyField(ChaiVariety,related_name='stores')\ndef__str__(self):\nreturnself.name\n\n```\n\n## One-to-one\nOne-to-one relationships are used when you have a model that has a one-to-one relationship with another model. In a One-to-One relationship, each instance of one model is associated with one and only one instance of another model. For example, each Chai variety can have a unique certificate.\nIn the existing `chai` app, open `models.py` and add the following code:\nmodels.py```\n\nclassChaiCertificate(models.Model):\nchai = models.OneToOneField(ChaiVariety,on_delete=models.CASCADE,related_name='certificate')\ncertificate_number = models.CharField(max_length=100)\nissued_date = models.DateTimeField(default=timezone.now)\nvalid_until = models.DateTimeField()\ndef__str__(self):\nreturnf'Certificate for {self.chai.name}'\n\n```\n\n## Update the admin\nIn the existing `chai` app, open `admin.py` and add the following code:\nadmin.py```\n\nfrom django.contrib import admin\nfrom.models import ChaiVariety, ChaiReview, Store, ChaiCertificate\nclassChaiReviewInline(admin.TabularInline):\nmodel = ChaiReview\nextra =1\nclassChaiVarietyAdmin(admin.ModelAdmin):\nlist_display =('name','type','date_added')\ninlines =[ChaiReviewInline]\nclassStoreAdmin(admin.ModelAdmin):\nlist_display =('name','location')\nfilter_horizontal =('chai_varieties',)\nclassChaiCertificateAdmin(admin.ModelAdmin):\nlist_display =('chai','certificate_number','issued_date','valid_until')\nadmin.site.register(ChaiVariety, ChaiVarietyAdmin)\nadmin.site.register(Store, StoreAdmin)\nadmin.site.register(ChaiCertificate, ChaiCertificateAdmin)\n\n```\n\n## Adding a form on frontend\nIn the existing `chai` app, create a new file called `forms.py` in the `chai` app directory. In this file, add the following code:\nforms.py```\n\nfrom django import forms\nfrom.models import ChaiVariety\nclassChaiVarietyForm(forms.Form):\nchai_variety = forms.ModelChoiceField(queryset=ChaiVariety.objects.all(),label=\"Select Chai Variety\")\n\n```\n\n## Handle the view for the form\nIn the existing `chai` app, open `views.py` and add the following code:\nviews.py```\n\nfrom.models import ChaiVariety, Store\nfrom.forms import ChaiVarietyForm\ndefchai_store_view(request):\nstores =None\nif request.method =='POST':\nform =ChaiVarietyForm(request.POST)\nif form.is_valid():\nchai_variety = form.cleaned_data['chai_variety']\nstores = Store.objects.filter(chai_varieties=chai_variety)\nelse:\nform =ChaiVarietyForm()\nreturnrender(request,'chai/chai_stores.html',{'form': form,'stores': stores})\n\n```\n\n## Add the template\nIn the existing `chai` app, create a new file called `chai_stores.html` in the `chai` app directory. In this file, add the following code:\nchai_stores.html```\n\n{% extends 'layout.html' %}\n{% block content %}\n<h1>Chai Stores</h1>\n<formmethod=\"post\">\n{% csrf_token %}\n{{ form.as_p }}\n<buttontype=\"submit\">Search Stores</button>\n</form>\n{% if stores %}\n<h2>Stores with selected Chai Variety</h2>\n<ul>\n{% for store in stores %}\n<li>{{ store.name }} - {{ store.location }}</li>\n{% endfor %}\n</ul>\n{% endif %}\n{% endblock %}\n\n```\n\n## Update the urls\nIn the `urls.py` file, add the following code to the `urlpatterns` list:\nurls.py```\n\npath('chai_stores/', views.chai_store_view,name='chai_stores'),\n\n```\n\n## Run the server\nIn the terminal, navigate to the `chai` directory and run the following command:\nTerminal window```\n\npythonmanage.pyrunserver\n\n```\n\nThat\u2019s it! You have successfully created a form that allows users to search for stores that have a specific chai variety. You can now add more functionality to the form and the view to make it more useful.\n## Summary\nIn this section, you learned how to create a form that allows users to search for stores that have a specific chai variety. We have also discussed about the different types of relationships in Django and how to use them in your models and views.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 18, 2025\n[ PreviousModels](https://docs.chaicode.com/youtube/chai-aur-django/models/)[Next Welcome](https://docs.chaicode.com/youtube/chai-aur-sql/welcome/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-django/tailwind/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/#_top)\n  * [ Hot Reloading ](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/#hot-reloading)\n  * [ Enable the admin panel in Django ](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/#enable-the-admin-panel-in-django)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/#conclusion)\n\n\n# Tailwind with Django\nTailwind CSS is a CSS framework that allows you to build custom styles for your web pages. It provides a set of pre-built classes that you can use to style your HTML elements.\nBefore we run the next command we need pip to be installed in your system. So far, we have been using `uv` to install packages, which is new and not yet supported by many packages.\nTerminal window```\n\npython-mensurepip--upgrade\n# alternatively\npython-mpipinstall--upgradepip\n\n```\n\nTo install Tailwind CSS in your Django project, you can use the following steps:\nTerminal window```\n\npipinstalldjango-tailwind\npipinstall'django-tailwind[reload]'\n\n```\n\nThis will install the `django-tailwind` package and the `django-tailwind[reload]` package, which includes the `tailwind-django` command-line tool.\nOnce you have installed Tailwind CSS, you can use the `tailwind-django` command to generate the necessary files for your project. This command will create a `tailwind.config.js` file in your project directory, as well as a `static/css/tailwind.css` file that contains the compiled Tailwind CSS.\nNow, add `tailwind` to your `INSTALLED_APPS` in your `settings.py` file:\nsettings.py```\n\nINSTALLED_APPS=[\n# ...\n'tailwind',\n# ...\n]\n\n```\n\nNext, run the `tailwind-django` command to generate the necessary files for your project:\nTerminal window```\n\npythonmanage.pytailwindinit\n\n```\n\nAdd the newly create `theme` to your INSTALLED_APPS in your `settings.py` file:\nsettings.py```\n\nINSTALLED_APPS=[\n# ...\n'theme',\n# ...\n]\nTAILWIND_APP_NAME='theme'# This is the name of the app that will be used to generate the tailwind files\nINTERNAL_IPS=['127.0.0.1']\n\n```\n\nNow run the following command to generate the necessary files for your project:\nTerminal window```\n\npythonmanage.pytailwindinstall\n\n```\n\nYou can now use the Tailwind CSS classes in your Django templates. All though, tailwind provides you a base template that you can use to start your project but you can now use tailwind in any base template you want.\n```\n\n{% load static tailwind_tags %}\n...\n<head>\n...\n{% tailwind_css %}\n...\n</head>\n\n```\n\n> \u2615\ufe0f I was not able to get tailwind intellisense to work in my IDE, so I had to create a `tailwind.config.js` file manually. This file is totally empty but works\nFinally, suggestions are there but you are not getting the desired result. That\u2019s because this app needs nodejs to be installed in your system. And you need to provide the path to the nodejs executable in your `settings.py` file: You can use command `which node` to find the path to the nodejs executable.\n  * [ MacOS ](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/#tab-panel-160)\n  * [ Windows ](https://docs.chaicode.com/youtube/chai-aur-django/tailwind/#tab-panel-161)\n\n\n```\n\nNPM_BIN_PATH='/user/local/bin/npm'\n\n```\n\n```\n\nNPM_BIN_PATH=r\"C:\\Program Files\\nodejs\\npm.cmd\"\n\n```\n\nNow everything is ready and we need 2 terminals to run the app.\nFirst terminal:\nTerminal window```\n\npythonmanage.pyrunserver\n\n```\n\nSecond terminal:\nTerminal window```\n\npythonmanage.pytailwindstart\n\n```\n\n> for production change this command to `python manage.py tailwind build`\n## Hot Reloading\nSince we have already installed the `django-tailwind[reload]` package, we can use the `tailwind-django` command to enable hot reloading in our project.\nAdd it to your `INSTALLED_APPS` in your `settings.py` file:\nsettings.py```\n\nINSTALLED_APPS=[\n# ...\n'django_browser_reload',\n#...\n]\n\n```\n\nAdd following code to your `settings.py` file:\nsettings.py```\n\nMIDDLEWARE=[\n# ...\n\"django_browser_reload.middleware.BrowserReloadMiddleware\",\n# ...\n]\n\n```\n\nAdd following code to your `urls.py` file:\nurls.py```\n\nfrom django.urls import include, path\nurlpatterns =[\n...,\npath(\"__reload__/\",include(\"django_browser_reload.urls\")),\n]\n\n```\n\n## Enable the admin panel in Django\nNow that we have Tailwind CSS installed and configured, we can enable the admin panel in our Django project. All settings and urls for the admin panel are already provided in django.\nFirst run the migrate command to create the necessary tables for the admin panel:\nTerminal window```\n\npythonmanage.pymigrate\n\n```\n\nNext is to create the admin user:\nTerminal window```\n\npythonmanage.pycreatesuperuser\n\n```\n\nAdd your username, email (this can be empty), and password to the `createsuperuser` command.\nNow you can acces the admin panel by going to [localhost:8000/admin](http://localhost:8000/admin/) in your browser. Enter your username and password to log in.\nTake a tour of the admin panel and in case you are wondering, yes, we can change the look and feel of the admin panel using so many plugins and themes that are available in the market but that is out of the scope of this tutorial.\n## Conclusion\nIn this tutorial, we have learned how to install and configure Tailwind CSS in a Django project. We have also learned how to use the admin panel in Django and how to enable hot reloading in our project. With these skills, you can now start building your own Django projects with Tailwind CSS and other plugins and themes that you need.\nNow, go and subscribe to [Chai aur Code](https://www.youtube.com/@chaiaurcode) to get notified about new tutorials and updates on my channel.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 18, 2025\n[ PreviousJinja Templates App](https://docs.chaicode.com/youtube/chai-aur-django/jinja-templates/)[Next Models](https://docs.chaicode.com/youtube/chai-aur-django/models/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-django/welcome/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-django/welcome/#_top)\n\n\n# Welcome\nHaanji! Swagat hai **Chai aur Docs** mein. \ud83c\udf89\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Chai aur Django** \u201d series on the [Chai aur Code](https://www.youtube.com/@chaiaurcode) YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nPlay\nLet\u2019s begin with the basics in the next section\u2026\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 18, 2025\n[ PreviousFunctions](https://docs.chaicode.com/youtube/chai-aur-c/functions/)[Next Django Intro](https://docs.chaicode.com/youtube/chai-aur-django/getting-started/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#_top)\n  * [ Git Snapshots ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#git-snapshots)\n  * [ 3 Musketeers of Git ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#3-musketeers-of-git)\n  * [ Commit Object ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#commit-object)\n  * [ Tree Object ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#tree-object)\n  * [ Blob Object ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#blob-object)\n  * [ Helpful commands ](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/#helpful-commands)\n\n\n# Git behind the scenes\nGit is a version control system that allows you to track changes to your files and folders. It is a powerful tool that can help you manage your code more effectively. In this section, we will explore the basics of how git works internally.\n## Git Snapshots\nA git snapshot is a point in time in the history of your code. It represents a specific version of your code, including all the files and folders that were present at that time. Each snapshot is identified by a unique hash code, which is a string of characters that represents the contents of the snapshot.\nA snapshot is not an image, it\u2019s just a representation of the code at a specific point in time. Snapshot is a loose term that is used when git stores information about the code in a locally stored key-value based database. Everything is stored as an object and each object is identified by a unique hash code.\n## 3 Musketeers of Git\nThe three musketeers of git are:\n  * Commit Object\n  * Tree Object\n  * Blob Object\n\n\n## Commit Object\nEach commit in the project is stored in `.git` folder in the form of a commit object. A commit object contains the following information:\n  * Tree Object\n  * Parent Commit Object\n  * Author\n  * Committer\n  * Commit Message\n\n\n## Tree Object\nTree Object is a container for all the files and folders in the project. It contains the following information:\n  * File Mode\n  * File Name\n  * File Hash\n  * Parent Tree Object\n\n\nEverything is stored as key-value pairs in the tree object. The key is the file name and the value is the file hash.\n## Blob Object\nBlob Object is present in the tree object and contains the actual file content. This is the place where the file content is stored.\n![Git Behind The Scenes.](https://docs.chaicode.com/_astro/git-behind-scenes.DjOkWmxn_2aCWmR.webp)\n## Helpful commands\nHere are some helpful commands that you can use to explore the git internals:\nTerminal window```\n\ngitshow-s--pretty=raw<commit-hash>\n\n```\n\nGrab tree id from the above command and use it in the following command to get the tree object:\nTerminal window```\n\ngitls-tree<tree-id>\n\n```\n\nGrab tree id from the above command and use it in the following command to get the blob object:\nTerminal window```\n\ngitshow<blob-id>\n\n```\n\nGrab tree id from the above command and use it in the following command to get the commit object:\nTerminal window```\n\ngitcat-file-p<commit-id>\n\n```\n\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousTerminology](https://docs.chaicode.com/youtube/chai-aur-git/terminology/)[Next Branches in Git](https://docs.chaicode.com/youtube/chai-aur-git/branches/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/branches/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#_top)\n  * [ HEAD in git ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#head-in-git)\n  * [ Creating a new branch ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#creating-a-new-branch)\n  * [ Merging branches ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#merging-branches)\n    * [ Fast-forward merge ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#fast-forward-merge)\n    * [ 3 Way merge ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#3-way-merge)\n    * [ Managing conflicts ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#managing-conflicts)\n  * [ Rename a branch ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#rename-a-branch)\n  * [ Delete a branch ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#delete-a-branch)\n  * [ Checkout a branch ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#checkout-a-branch)\n  * [ List all branches ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#list-all-branches)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-git/branches/#conclusion)\n\n\n# Branches in Git\nBranches are a way to work on different versions of a project at the same time. They allow you to create a separate line of development that can be worked on independently of the main branch. This can be useful when you want to make changes to a project without affecting the main branch or when you want to work on a new feature or bug fix.\n![Branches in Git.](https://docs.chaicode.com/_astro/branches.YOIsOP4X_Z2gjmSk.webp)\nSome developers can work on Header, some can work on Footer, some can work on Content, and some can work on Layout. This is a good example of how branches can be used in git.\n## HEAD in git\nThe HEAD is a pointer to the current branch that you are working on. It points to the latest commit in the current branch. When you create a new branch, it is automatically set as the HEAD of that branch.\n> the default branch used to be master, but it is now called main. There is nothing special about main, it is just a convention.\n## Creating a new branch\nTo create a new branch, you can use the following command:\nTerminal window```\n\ngitbranch\ngitbranchbug-fix\ngitswitchbug-fix\ngitlog\ngitswitchmain\ngitswitch-cdark-mode\ngitcheckoutorange-mode\n\n```\n\nSome points to note:\n  * `git branch` - This command lists all the branches in the current repository.\n  * `git branch bug-fix` - This command creates a new branch called `bug-fix`.\n  * `git switch bug-fix` - This command switches to the `bug-fix` branch.\n  * `git log` - This command shows the commit history for the current branch.\n  * `git switch main` - This command switches to the `main` branch.\n  * `git switch -c dark-mode` - This command creates a new branch called `dark-mode`. the `-c` flag is used to create a new branch.\n  * `git checkout orange-mode` - This command switches to the `orange-mode` branch.\n\n\n> Commit before switching to a branch Go to .git folder and checkout to the HEAD file\n## Merging branches\n  * Merging is about bringing changes from one branch to another.\n  * In Git we have two types of merges : \n    * Fast-Forward Merges (If branches have not diverged)\n    * 3-Way Merges (if branches have diverged)\n\n\n### Fast-forward merge\nThis one is easy as branch that you are trying to merge is usually ahead and there are no conflicts.\nWhen you are done working on a branch, you can merge it back into the main branch. This is done using the following command:\nTerminal window```\n\ngitcheckoutmain\ngitmergebug-fix\n\n```\n\n![Fast Forward Merge.](https://docs.chaicode.com/_astro/fast-forward-merge.2JLs9oN__176LJB.webp)\nSome points to note:\n  * `git checkout main` - This command switches to the `main` branch.\n  * `git merge bug-fix` - This command merges the `bug-fix` branch into the `main` branch.\n\n\nThis is a fast-forward merge. It means that the commits in the `bug-fix` branch are directly merged into the `main` branch. This can be useful when you want to merge a branch that has already been pushed to the remote repository.\n### 3 Way merge\n![Three way merge.](https://docs.chaicode.com/_astro/three-way-merge.C3EirtdW_Z1P6LdI.webp)\nIn this type of merge, the main branch has additional commits that are not present in the `bug-fix` branch. This is not a fast-forward merge. Here git looks at 3 different commits [common ancestor of branches + tips of each branch] and combines the changes into one merge commit.\nWhen you are done working on a branch, you can merge it back into the main branch. This is done using the following command:\nTerminal window```\n\ngitcheckoutmain\ngitmergebug-fix\n\n```\n\nIf the command are same, what is the difference between fast-forward and not fast-forward merge?\nThe difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts.\n![Merge Conflicts.](https://docs.chaicode.com/_astro/merge-conflict.DXsrSRd3_Z6K0BV.webp)\n### Managing conflicts\nThere is no magic button to resolve conflicts. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts. I personally use VSCode merge tool. Github also has a merge tool that can help you resolve the conflicts but most of the time I handle them in VSCode and it gives me all the options to resolve the conflicts.\nOverall it sounds scary to beginners but it is not, it\u2019s all about communication and understanding the code situation with your team members.\n## Rename a branch\nYou can rename a branch using the following command:\nTerminal window```\n\ngitbranch-m<old-branch-name><new-branch-name>\n\n```\n\n## Delete a branch\nYou can delete a branch using the following command:\nTerminal window```\n\ngitbranch-d<branch-name>\n\n```\n\n## Checkout a branch\nYou can checkout a branch using the following command:\nTerminal window```\n\ngitcheckout<branch-name>\n\n```\n\nCheckout a branch means that you are going to work on that branch. You can checkout any branch you want.\n## List all branches\nYou can list all branches using the following command:\nTerminal window```\n\ngitbranch\n\n```\n\nList all branches means that you are going to see all the branches in your repository.\n## Conclusion\nIn this section, we have learned about the different types of merges and how to resolve conflicts. We have also learned about the importance of branching and merging in Git and Github.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousBehind the scenes](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/)[Next Diff, Stash, Tags](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#_top)\n  * [ Git diff ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#git-diff)\n    * [ How to Read the Diff Output ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#how-to-read-the-diff-output)\n    * [ Comparing Working Directory and Staging Area ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#comparing-working-directory-and-staging-area)\n    * [ Comparing Staging Area with Repository ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#comparing-staging-area-with-repository)\n    * [ Comparing Two Branches ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#comparing-two-branches)\n    * [ Comparing Specific Commits: ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#comparing-specific-commits)\n  * [ Git Stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#git-stash)\n    * [ Naming the stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#naming-the-stash)\n    * [ View the stash list ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#view-the-stash-list)\n    * [ Apply the Most Recent Stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#apply-the-most-recent-stash)\n    * [ Apply Specific Stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#apply-specific-stash)\n    * [ Applying and Drop a Stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#applying-and-drop-a-stash)\n    * [ Drop the stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#drop-the-stash)\n    * [ Applying stash to a specific branch ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#applying-stash-to-a-specific-branch)\n    * [ Clearing the stash ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#clearing-the-stash)\n  * [ Git Tags ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#git-tags)\n    * [ Creating a tag ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#creating-a-tag)\n    * [ Create an annotated tag ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#create-an-annotated-tag)\n    * [ List all tags ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#list-all-tags)\n    * [ Tagging a specific commit ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#tagging-a-specific-commit)\n    * [ Push tags to remote repository ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#push-tags-to-remote-repository)\n    * [ Delete a tag ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#delete-a-tag)\n    * [ Delete tag on remote repository ](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/#delete-tag-on-remote-repository)\n\n\n# Diff, Stash and Tags\nThis guide will help you understand the different commands related to diff, tags and stash in git. These are not main stream commands but they are very useful in certain situations.\n## Git diff\nThe `git diff` is an informative command that shows the differences between two commits. It is used to compare the changes made in one commit with the changes made in another commit. Git consider the changed versions of same file as two different files. Then it gives names to these two files and shows the differences between them.\n### How to Read the Diff Output\n  * `a/` \u2013 the original file (before changes)\n  * `b/` \u2013 the updated file (after changes)\n  * `---` \u2013 marks the beginning of the original file\n  * `+++` \u2013 marks the beginning of the updated file\n  * `@@` \u2013 shows the line numbers and position of changes\n\n\nHere the file A and file B are the same file but different versions.\nGit will show you the changes made in the file A and file B. It will also show you the line number where the change occurred along with little preview of the change.\n### Comparing Working Directory and Staging Area\nTerminal window```\n\ngitdiff\n\n```\n\nThis command shows the unstaged changes in your working directory compared to the staging area. This command alone will not show you the changes made in the file A and file B, you need to provide options to show the changes.\n### Comparing Staging Area with Repository\nTerminal window```\n\ngitdiff--staged\n\n```\n\nThis command shows the changes between your last commit and the staging area (i.e., changes that are staged and ready to be committed).\n### Comparing Two Branches\nTerminal window```\n\ngitdiff<branch-name-one><branch-name-two>\n\n```\n\nThis command compares the difference between two branches.\nAnother way to compare the difference between two branches is to use the following command:\nTerminal window```\n\ngitdiffbranch-name-one..branch-name-two\n\n```\n\n### Comparing Specific Commits:\nTerminal window```\n\ngitdiff<commit-hash-one><commit-hash-two>\n\n```\n\nThis command compares the difference between two commits.\n## Git Stash\nStash is a way to save your changes in a temporary location. It\u2019s useful when switching branches without losing work. You can then come back to the file later and apply the changes.\n> Conflicting changes will not allow you to switch branches without committing the changes. Another alternative is to use the `git stash` command to save your changes in a temporary location.\nTerminal window```\n\ngitstash\n\n```\n\nThis command saves your changes in a temporary location. It is like a stack of changes that you can access later.\n### Naming the stash\nYou can also name the stash by using the following command:\nTerminal window```\n\ngitstashsave\"work in progress on X feature\"\n\n```\n\n### View the stash list\nYou can view the list of stashes by using the following command:\nTerminal window```\n\ngitstashlist\n\n```\n\n### Apply the Most Recent Stash\nYou can apply the stash by using the following command:\nTerminal window```\n\ngitstashapply\n\n```\n\n### Apply Specific Stash\nYou can apply the specific stash by using the following command:\nTerminal window```\n\ngitstashapplystash@{0}\n\n```\n\nHere `stash@{0}` is the name of the stash. You can use the `git stash list` command to get the name of the stash.\n### Applying and Drop a Stash\nYou can apply and drop the stash by using the following command:\nTerminal window```\n\ngitstashpop\n\n```\n\nThis command applies the stash and drops it from the stash list.\n### Drop the stash\nYou can drop the stash by using the following command:\nTerminal window```\n\ngitstashdrop\n\n```\n\n### Applying stash to a specific branch\nYou can apply the stash to a specific branch by using the following command:\nTerminal window```\n\ngitstashapplystash@{0}<branch-name>\n\n```\n\n### Clearing the stash\nYou can clear the stash by using the following command:\nTerminal window```\n\ngitstashclear\n\n```\n\n## Git Tags\nTags are a way to mark a specific point in your repository. They are useful when you want to remember a specific version of your code or when you want to refer to a specific commit. Tags are like sticky notes that you can attach to your commits.\n### Creating a tag\nYou can create a tag using the following command:\nTerminal window```\n\ngittag<tag-name>\n\n```\n\nThis command creates a new tag with the specified name. The tag will be attached to the current commit.\n### Create an annotated tag\nYou can create an annotated tag using the following command:\nTerminal window```\n\ngittag-a<tag-name>-m\"Release 1.0\"\n\n```\n\nThis command creates an annotated tag with the specified name and message. The tag will be attached to the current commit.\n### List all tags\nYou can list all tags using the following command:\nTerminal window```\n\ngittag\n\n```\n\nThis command lists all the tags in your repository.\n### Tagging a specific commit\nYou can tag a specific commit using the following command:\nTerminal window```\n\ngittag<tag-name><commit-hash>\n\n```\n\n### Push tags to remote repository\nYou can push tags to a remote repository using the following command:\nTerminal window```\n\ngitpushorigin<tag-name>\n\n```\n\n### Delete a tag\nYou can delete a tag using the following command:\nTerminal window```\n\ngittag-d<tag-name>\n\n```\n\n### Delete tag on remote repository\nYou can delete a tag on a remote repository using the following command:\nTerminal window```\n\ngitpushorigin:<tag-name>\n\n```\n\n# Conclusion\nIn this section, we explored how to use Git\u2019s diff, stash, and tags commands. Though not used as frequently as add, commit, or push, they are incredibly helpful in debugging, context switching, and release management. See you next tutorial.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousBranches in Git](https://docs.chaicode.com/youtube/chai-aur-git/branches/)[Next Managing History](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/github/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/github/#_top)\n  * [ What is Github? ](https://docs.chaicode.com/youtube/chai-aur-git/github/#what-is-github)\n  * [ Github Account ](https://docs.chaicode.com/youtube/chai-aur-git/github/#github-account)\n  * [ Configuring Git ](https://docs.chaicode.com/youtube/chai-aur-git/github/#configuring-git)\n  * [ Setup SSH Key ](https://docs.chaicode.com/youtube/chai-aur-git/github/#setup-ssh-key)\n  * [ Publish Code to Remote Repository ](https://docs.chaicode.com/youtube/chai-aur-git/github/#publish-code-to-remote-repository)\n    * [ Remote URL Setting ](https://docs.chaicode.com/youtube/chai-aur-git/github/#remote-url-setting)\n    * [ Add Remote Repository ](https://docs.chaicode.com/youtube/chai-aur-git/github/#add-remote-repository)\n    * [ Pushing Code ](https://docs.chaicode.com/youtube/chai-aur-git/github/#pushing-code)\n    * [ Setup an upstream remote ](https://docs.chaicode.com/youtube/chai-aur-git/github/#setup-an-upstream-remote)\n  * [ Get code from remote repository ](https://docs.chaicode.com/youtube/chai-aur-git/github/#get-code-from-remote-repository)\n    * [ Fetch code ](https://docs.chaicode.com/youtube/chai-aur-git/github/#fetch-code)\n    * [ Pull code ](https://docs.chaicode.com/youtube/chai-aur-git/github/#pull-code)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-git/github/#conclusion)\n\n\n# About Github\nThis guide will help you get started with Github.\n## What is Github?\nGithub is a web-based Git repository hosting service. It is a popular platform for developers to collaborate on projects and to share code. Github provides a user-friendly interface for managing and tracking changes to your code, as well as a platform for hosting and sharing your projects with others.\nSome other alternative of Github are:\n  * Gitlab\n  * Bitbucket\n  * Azure Repos\n  * Gitea\n\n\nBut mainstream popular tool these days is Github.\n## Github Account\nCreating a Github account is free and easy. You can create an account by visiting the [Github website](https://github.com/) and clicking on the \u201cSign up\u201d button. You will be prompted to enter your email address and password, and then you will be redirected to the Github homepage.\nOnce you have created an account, you can start using Github to host and collaborate on your projects. Github provides a variety of features and tools that make it easy to manage and track your code, including issues, pull requests, and code reviews.\n## Configuring Git\nIf you haven\u2019t done it already, you need to configure your git config file. You can do this by running the following command:\nTerminal window```\n\ngitconfig--globaluser.email\"your-email@example.com\"\ngitconfig--globaluser.name\"Your Name\"\n\n```\n\nThis will set your email and name as your global settings. You can change these settings at any time by running the same command again.\nNow you can check your config settings:\nTerminal window```\n\ngitconfig--list\n\n```\n\nThis will show you all the settings that you have changed.\n## Setup SSH Key\nIf you haven\u2019t done it already, you need to setup ssh key and add it to your github account. You can do this by following the instructions on the [Github website](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent).\nYou can find the exact steps on the website for both Windows and MacOS. The steps are same for both, only apple users need to add the ssh key to their keychain.\n  1. **Generate a new SSH key**\nTo generate a new SSH key, open the terminal and run the following command:\nTerminal window```\n\nssh-keygen-ted25519-C\"your-email@chaicode.com\"\n\n```\n\nHere ed25519 is the type of key that you are generating. This creates a new SSH key, using the provided email as label.\n  2. **Save the key**\nAfter generating the key, you need to save it to your computer. You can do this by running the following command:\n> Enter a file in which to save the key `(/Users/YOU/.ssh/id_ALGORITHM): [Press enter]`\nAt the prompt you can enter passphrase for the key or you can leave it blank. If you leave it blank, the key will be saved without a passphrase.\n  3. **Add key to your ssh-agent**\nAfter saving the key, you need to add it to your ssh-agent. You can do this by running the following command:\nHere it is best to refer above link for more information, as Github has a lot of information on this. There is no point in repeating it here.\n  4. **Add key to github**\nUse the web ui to add the key to your github account. You can do this by following the instructions on the [Github website](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account?tool=webui).\n\n\n## Publish Code to Remote Repository\nNow that you have setup your ssh key and added it to your github account, you can start pushing your code to the remote repository.\nCreate a new Repo on your system first, add some code and commit it.\nTerminal window```\n\ngitinit\ngitadd<files>\ngitcommit-m\"commit message\"\n\n```\n\n### Remote URL Setting\nYou can check the remote url setting by running the following command:\nTerminal window```\n\ngitremote-v\n\n```\n\nThis will show you the remote url of your repository.\n### Add Remote Repository\nYou can add a remote repository by running the following command:\n> `git remote add origin <remote-url>`\nHere `<remote-url>` is the url of the remote repository that you want to add and origin is the name of the remote repository. This origin is used to refer to the remote repository in the future.\nTerminal window```\n\ngitremoteaddoriginhttps://github.com/hiteshchoudhary/chai-something.git\n\n```\n\n### Pushing Code\n> git push remote-name branch-name\nHere `remote-name` is the name of the remote repository that you want to push to and `branch-name` is the name of the branch that you want to push.\nTerminal window```\n\ngitpushoriginmain\n\n```\n\n### Setup an upstream remote\nSetting up an upstream remote is useful when you want to keep your local repository up to date with the remote repository. It allows you to fetch and merge changes from the remote repository into your local repository.\nTo set up an upstream remote, you can use the following command:\nTerminal window```\n\ngitremoteaddupstream<remote-url>\n\n```\n\nor you can use shorthand:\nTerminal window```\n\ngitremoteadd-u<remote-url>\n\n```\n\nYou can do this at the time of pushing your code to the remote repository.\nTerminal window```\n\ngitpush-uoriginmain\n\n```\n\nThis will set up an upstream remote and push your code to the remote repository.\nThis will allow you to run future commands like `git pull` and `git push` without specifying the remote name.\n## Get code from remote repository\nThere are two ways to get code from a remote repository:\n  * fetch the code\n  * pull the code\n\n\nFetch the code means that you are going to download the code from the remote repository to your local repository. Pull the code means that you are going to download the code from the remote repository and merge it with your local repository.\n![Git Workflow.](https://docs.chaicode.com/_astro/git-workflow.DdVRgovW_Z2ofBQp.webp)\n### Fetch code\nTo fetch code from a remote repository, you can use the following command:\nTerminal window```\n\ngitfetch<remote-name>\n\n```\n\nHere `<remote-name>` is the name of the remote repository that you want to fetch from.\n### Pull code\nTo pull code from a remote repository, you can use the following command:\nTerminal window```\n\n# git pull <remote-name> <branch-name>\ngitpulloriginmain\n\n```\n\nHere `<remote-name>` is the name of the remote repository that you want to pull from and `<branch-name>` is the name of the branch that you want to pull.\n## Conclusion\nIn this section, we have learned about Github and how to use it. We have also learned about how to setup ssh key and add it to your github account. We have also learned about how to publish code to the remote repository.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousManaging History](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/)[Next Welcome](https://docs.chaicode.com/youtube/chai-aur-c/welcome/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/introduction/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#_top)\n  * [ Git and Github are different ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#git-and-github-are-different)\n  * [ A little on version control systems ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#a-little-on-version-control-systems)\n  * [ Learning Path ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#learning-path)\n  * [ Install Git ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#install-git)\n  * [ Account on Github ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#account-on-github)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-git/introduction/#conclusion)\n\n\n# Git and GitHub\nLet\u2019s start with the basics. Git is a version control system that allows you to track changes to your files and collaborate with others. It is used to manage the history of your code and to merge changes from different branches. I can understand that as of now these terms like version control, branches, and merges are not familiar to you. But don\u2019t worry, we will learn them in this tutorial.\n## Git and Github are different\nGit is a version control system that is used to track changes to your files. It is a free and open-source software that is available for Windows, macOS, and Linux. Remember, GIT is a software and can be installed on your computer.\nGithub is a web-based hosting service for Git repositories. Github is an online platform that allows you to store and share your code with others. It is a popular platform for developers to collaborate on projects and to share code. It is not that Github is the only provider of Git repositories, but it is one of the most popular ones.\n## A little on version control systems\nVersion control systems are used to manage the history of your code. They allow you to track changes to your files and to collaborate with others. Version control systems are essential for software development. Consider version control as a checkpoint in game. You can move to any time in the game and you can always go back to the previous checkpoint. This is the same concept in software development.\nBefore Git became mainstream, version control systems were used by developers to manage their code. They were called SCCS (Source Code Control System). SCCS was a proprietary software that was used to manage the history of code. It was expensive and not very user-friendly. Git was created to replace SCCS and to make version control more accessible and user-friendly. Some commong version control systems are Subversion (SVN), CVS, and Perforce.\n## Learning Path\nIn this tutorial, we will learn the basics of Git and Github. We will start with the basics and then move on to more advanced topics. We will also learn how to use Git and Github for collaboration and version control. By the end of this tutorial, you will have a good understanding of Git and Github and will be able to use them to manage your code effectively.\nWe will go in this jounney something like this:\n  * Get the basics\n  * Use it daily\n  * Face the problems\n  * Solve them\n  * Learn more\n\n\n> We will focus more on Git first, once you understand git, moving towards Github will be easy.\n## Install Git\nTo install Git, you can use command line or you can visit official website and download the installer for your operating system. Git is available for Windows, macOS, and Linux and is available at <https://git-scm.com/downloads>.\n## Account on Github\nAnother step that you have to follow is to create an account on Github. I will later walk you through the process of linking your Github account with your Machine. You cannot push your code to Github without ssh-key setup. Password authentication is not recommended and these days it is not possible to use it. So, you need to setup ssh-key authentication. We will cover that in a later part of the tutorial.\n## Conclusion\nIn this part, we have learned the basics of Git and Github. We have also learned how to install Git and Github. We have also learned about the importance of version control systems and how they are used in software development.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousWelcome](https://docs.chaicode.com/youtube/chai-aur-git/welcome/)[Next Terminology](https://docs.chaicode.com/youtube/chai-aur-git/terminology/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/managing-history/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#_top)\n  * [ Merge commits ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#merge-commits)\n  * [ Rebase in git ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#rebase-in-git)\n    * [ Ensure you are on the branch you want to rebase ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#ensure-you-are-on-the-branch-you-want-to-rebase)\n    * [ Resolve any conflicts ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#resolve-any-conflicts)\n  * [ Git reflog ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#git-reflog)\n    * [ View the reflog: ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#view-the-reflog)\n    * [ Find specific commit ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#find-specific-commit)\n    * [ Recover lost commits or changes ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#recover-lost-commits-or-changes)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-git/managing-history/#conclusion)\n\n\n# Managing History\nThis guide will help you understand how to manage your Git history effectively.\n## Merge commits\nA merge commit is a commit that combines two or more commits into one. It is created when you merge two or more branches into a single branch. The merge commit contains all the changes from the original branches, and it is used to keep the project history clean and easy to understand.\n![Merge Commit.](https://docs.chaicode.com/_astro/merge-commit.B9QuyM2V_2cBKCs.webp)\n## Rebase in git\nGit rebase is a powerful Git feature used to change the base of a branch. It effectively allows you to move a branch to a new starting point, usually a different commit, by \u201creplaying\u201d the commits from the original base onto the new base. This can be useful for keeping a cleaner, linear project history.\nSome people like to use rebase over the merge command because it allows you to keep the commit history cleaner and easier to understand. It also allows you to make changes to the code without affecting the original branch.\nHere\u2019s a flow example of using git rebase with all the commands involved:\nSuppose you have a feature branch called feature-branch that you want to rebase onto the main branch.\n![Rebase.](https://docs.chaicode.com/_astro/git-rebase.VqprjhBO_uHjP6.webp)\n### Ensure you are on the branch you want to rebase\nTerminal window```\n\ngitcheckoutfeature-branch\ngitrebasemain\n\n```\n\nThis will replay the commits from feature-branch on top of the latest changes in main.\n### Resolve any conflicts\nIf there are any conflicts, you will need to resolve them manually. You can use the merge tool in VSCode to resolve the conflicts.\nTerminal window```\n\ngitadd<resolved-files>\ngitrebase--continue\n\n```\n\n> Try to avoid \u2014force option when using rebase. It can cause issues with the project history. I have seen many horror stories of people using \u2014force to fix conflicts.\n## Git reflog\nGit reflog is a command that shows you the history of your commits. It allows you to see the changes that you have made to your repository over time. This can be useful for debugging and understanding the history of your project.\n### View the reflog:\nTerminal window```\n\ngitreflog\n\n```\n\nThis will show you the history of your commits. You can use the number at the end of each line to access the commit that you want to view.\n### Find specific commit\nYou can find a specific commit using the following command:\nTerminal window```\n\ngitreflog<commit-hash>\n\n```\n\n### Recover lost commits or changes\nIf you accidentally deleted a branch or made changes that are no longer visible in the commit history, you can often recover them using the reflog. First, find the reference to the commit where the branch or changes existed, and then reset your branch to that reference.\nTerminal window```\n\ngitreflog<commit-hash>\ngitreset--hard<commit-hash>\n\n```\n\nor you can use `HEAD@{n}` to reset to the nth commit before the one you want to reset to.\nTerminal window```\n\ngitreflog<commit-hash>\ngitreset--hardHEAD@{1}\n\n```\n\n## Conclusion\nIn this guide, we\u2019ve covered important aspects of managing Git history through rebase and reflog. We\u2019ve learned how rebase can help maintain a cleaner, more linear project history, and how reflog can help recover lost commits or changes.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousDiff, Stash, Tags](https://docs.chaicode.com/youtube/chai-aur-git/diff-stash-tags/)[Next Collaborate with Github](https://docs.chaicode.com/youtube/chai-aur-git/github/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/terminology/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#_top)\n  * [ Check your git version ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#check-your-git-version)\n  * [ Repository ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#repository)\n  * [ Your config settings ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#your-config-settings)\n  * [ Creating a repository ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#creating-a-repository)\n  * [ Commit ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#commit)\n  * [ Complete git flow ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#complete-git-flow)\n  * [ Stage ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#stage)\n  * [ Commit ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#commit-1)\n  * [ Logs ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#logs)\n  * [ change default code editor ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#change-default-code-editor)\n  * [ gitignore ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#gitignore)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-git/terminology/#conclusion)\n\n\n# Terminology\nGit and people who use it talk in a different terminology. For example they don\u2019t call it a folder, they call it a repository. They don\u2019t call it alternative timeline, they call it branch. Although, I agree that alternative timeline is a better name for it. \ud83d\ude01\n## Check your git version\nTo check your git version, you can run the following command:\nTerminal window```\n\ngit--version\n\n```\n\nThis command will display the version of git installed on your system. Git is a very stable software and don\u2019t get any breaking changes in majority of the cases, at least in my experience.\n## Repository\nA repository is a collection of files and directories that are stored together. It is a way to store and manage your code. A repository is like a folder on your computer, but it is more than just a folder. It can contain other files, folders, and even other repositories. You can think of a repository as a container that holds all your code.\nThere is a difference between a software on your system vs tracking a particular folder on your system. At any point you can run the following command to see the current state of your repository:\nTerminal window```\n\ngitstatus\n\n```\n\n![Repo Status.](https://docs.chaicode.com/_astro/repo-status.JIM1nCWI_Z205yrX.webp)\nNot all folders are meant to be tracked by git. Here we can see that all green folders are projects are getting tracked by git but red ones are not.\n## Your config settings\nGithub has a lot of settings that you can change. You can change your username, email, and other settings. Whenever you checkpoint your changes, git will add some information about your such as your username and email to the commit. There is a git config file that stores all the settings that you have changed. You can make settings like what editor you would like to use etc. There are some global settings and some repository specific settings.\nLet\u2019s setup your email and username in this config file. I would recommend you to create an account on github and then use the email and username that you have created.\nTerminal window```\n\ngitconfig--globaluser.email\"your-email@example.com\"\ngitconfig--globaluser.name\"Your Name\"\n\n```\n\nNow you can check your config settings:\nTerminal window```\n\ngitconfig--list\n\n```\n\nThis will show you all the settings that you have changed.\n## Creating a repository\nCreating a repository is a process of creating a new folder on your system and initializing it as a git repository. It\u2019s just regular folder to code your project, you are just asking git to track it. To create a repository, you can use the following command:\nTerminal window```\n\ngitstatus\ngitinit\n\n```\n\n`git status` command will show you the current state of your repository. `git init` command will create a new folder on your system and initialize it as a git repository. This adds a hidden `.git` folder to your project.\n## Commit\ncommit is a way to save your changes to your repository. It is a way to record your changes and make them permanent. You can think of a commit as a snapshot of your code at a particular point in time. When you commit your changes, you are telling git to save them in a permanent way. This way, you can always go back to that point in time and see what you changed.\nUsual flow looks like this:\n![Flow.](https://docs.chaicode.com/_astro/flow.DIk3TV2p_Zs00Un.webp)\n## Complete git flow\nA complete git flow, along with pushing the code to github looks like this:\n![Complete Flow.](https://docs.chaicode.com/_astro/complete-flow.DYr-Pvsp_1IQISm.webp)\nWhen you want to track a new folder, you first use `init` command to create a new repository. Then you can use `add` command to add the folder to the repository. After that you can use `commit` command to save the changes. Finally you can use `push` command to push the changes to github. Of course there is more to it but this is the basic flow.\n## Stage\nStage is a way to tell git to track a particular file or folder. You can use the following command to stage a file:\nTerminal window```\n\ngitinit\ngitadd<file><file2>\ngitstatus\n\n```\n\nHere we are initializing the repository and adding a file to the repository. Then we can see that the file is now being tracked by git. Currently our files are in staging area, this means that we have not yet committed the changes but are ready to be committed.\n## Commit\nTerminal window```\n\ngitcommit-m\"commit message\"\ngitstatus\n\n```\n\nHere we are committing the changes to the repository. We can see that the changes are now committed to the repository. The `-m` flag is used to add a message to the commit. This message is a short description of the changes that were made. You can use this message to remember what the changes were. Missing the `-m` flag will result in an action that opens your default settings editor, which is usually VIM. We will change this to vscode in the next section.\n## Logs\nTerminal window```\n\ngitlog\n\n```\n\nThis command will show you the history of your repository. It will show you all the commits that were made to the repository. You can use the `--oneline` flag to show only the commit message. This will make the output more compact and easier to read.\n\u2615\ufe0f - Check git log docs\n> Atomic commits are a way to make sure that each commit is a self-contained unit of work. This means that if one commit fails, you can always go back to a previous commit and fix the issue. This is important for maintaining a clean and organized history in your repository.\n## change default code editor\nYou can change the default code editor in your system to vscode. To do this, you can use the following command:\nTerminal window```\n\ngitconfig--globalcore.editor\"code --wait\"\n\n```\n\n## gitignore\nGitignore is a file that tells git which files and folders to ignore. It is a way to prevent git from tracking certain files or folders. You can create a gitignore file and add list of files and folders to ignore by using the following command:\nExample:\n.gitignore```\n\nnode_modules\n.env\n.vscode\n\n```\n\nNow, when you run the `git status` command, it will not show the `node_modules` and `.vscode` folders as being tracked by git.\n## Conclusion\nIn this section, we have learned about the basics of git and how to use it to track changes to your files and folders. We have also learned about the different commands that you can use to interact with your repository, such as `init`, `add`, `commit`, `log`, etc By the end of this section, you should have a good understanding of how to use git and how to use it effectively to manage your code.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousGit and GitHub](https://docs.chaicode.com/youtube/chai-aur-git/introduction/)[Next Behind the scenes](https://docs.chaicode.com/youtube/chai-aur-git/behind-the-scenes/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-git/welcome/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-git/welcome/#_top)\n\n\n# Welcome\nHaanji! Swagat hai **Chai aur Docs** mein. \ud83c\udf89\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Chai aur Git** \u201d series on the [Chai aur Code](https://www.youtube.com/@chaiaurcode) YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nPlay\nLet\u2019s begin with the basics in the next section\u2026\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousCommon HTML Tags](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/)[Next Git and GitHub](https://docs.chaicode.com/youtube/chai-aur-git/introduction/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/#_top)\n  * [ Some common Emmit shortcuts ](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/#some-common-emmit-shortcuts)\n    * [ ID and Class ](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/#id-and-class)\n    * [ Grouping ](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/#grouping)\n    * [ CSS shortcuts ](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/#css-shortcuts)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/#conclusion)\n\n\n# Emmet Crash Course\nEmmit is a code snippets manager for VS Code. It is used to create HTML code faster. Emmit is a must-have tool for any web developer. In VS Code, Emmit is enabled by default. It works only after you have created a new HTML file.\n> Learn the shortcuts and just press the tab or enter key to get the code you want.\n## Some common Emmit shortcuts\n  * `!` - Inserts a `<!DOCTYPE html>` tag\n  * `h1` - Inserts a `<h1>` tag\n  * `h2` - Inserts a `<h2>` tag\n  * `p` - Inserts a `<p>` tag\n  * `img` - Inserts an `<img>` tag\n  * `a` - Inserts an `<a>` tag\n  * `ul` - Inserts an `<ul>` tag\n  * `ul>li` - Inserts a `<li>` tag inside an `<ul>` tag\n  * `ul>li>a` - Inserts an `<a>` tag inside a `<li>` tag inside an `<ul>` tag\n  * `ul>li*3` - Inserts 3 `<li>` tags inside an `<ul>` tag\n  * `div` - Inserts a `<div>` tag\n  * `div>p` - Inserts a `<p>` tag inside a `<div>` tag\n  * `div>p*3` - Inserts 3 `<p>` tags inside a `<div>` tag\n\n\n### ID and Class\n  * `#` - Inserts an `id` attribute\n  * `.` - Inserts a `class` attribute\n\n\nExample:\n  * `#my-id` - Inserts an `id` attribute with the value `my-id`\n  * `.my-class` - Inserts a `class` attribute with the value `my-class`\n  * `div>(header>ul>li*2>a)+footer>p1` - expands into\n```\n\n<div>\n<header>\n<ul>\n<li><ahref=\"\"></a></li>\n<li><ahref=\"\"></a></li>\n</ul>\n</header>\n<footer>\n<p></p>\n</footer>\n</div>\n\n```\n\n\n\n### Grouping\n  * `div>(header>ul>li*2>a)+footer>p` - Inserts a `<div>` tag with a `<header>` tag inside it, a `<ul>` tag inside it, and 2 `<li>` tags inside the `<ul>` tag. Then it inserts an `<a>` tag inside each `<li>` tag. Finally it inserts a `<footer>` tag and a `<p>` tag inside it.\n\n\n> Yep, it can go little bit crazy. But you don\u2019t have to worry about it. Rarely you will need to use it.\n### CSS shortcuts\n  * `style` - Inserts a `<style>` tag\n  * `pos` - Inserts a `position` property\n  * `pos:absolute` - Inserts a `position` property with the value `absolute`\n  * `bgc` - Inserts a `background-color` property\n  * `bgc:red` - Inserts a `background-color` property with the value `red`\n  * `ma` - Inserts a `margin:auto` property\n\n\n## Conclusion\nEmmit is a must-have tool for any web developer. BUT this does not mean you have to learn every single shortcut. You can use Emmit to create HTML code faster. NO ONE remembers all the shortcuts. We use then mostly by trial and error, and learning them as we go.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousHTML Intro](https://docs.chaicode.com/youtube/chai-aur-html/introduction/)[Next Common HTML Tags](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-html/html-tags/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#_top)\n  * [ Basic Terminology ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#basic-terminology)\n  * [ HTML Tags for Text Content ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-text-content)\n  * [ HTML Tags for Lists ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-lists)\n  * [ HTML Tags for Tables ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-tables)\n  * [ HTML Tags for Forms ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-forms)\n  * [ HTML Tags for Media ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-media)\n  * [ HTML Tags for Linking and Metadata ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-linking-and-metadata)\n    * [ Script Tag Variations ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#script-tag-variations)\n  * [ HTML Tags for Semantic and Meta Content ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html-tags-for-semantic-and-meta-content)\n  * [ Attributes for HTML Tags ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#attributes-for-html-tags)\n    * [ HTML5 attributes ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html5-attributes)\n  * [ HTML5 tags ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#html5-tags)\n  * [ Conclusion ](https://docs.chaicode.com/youtube/chai-aur-html/html-tags/#conclusion)\n\n\n# Common HTML Tags\nFocus on the Essentials \nRemember, you don\u2019t need to master HTML to become a web developer. Focus on the basics and move on quickly. HTML5 only adds a few new tags and attributes to the classic HTML vocabulary. Although accessibility is very important, we\u2019ll cover that later\u2014especially if you plan to build web applications with JavaScript or modern frameworks.\n## Basic Terminology\n  * **Tag** \u2013 A piece of text enclosed in angle brackets (e.g., `<p>`) that defines an HTML element.\n  * **Attribute** \u2013 Extra information provided inside an opening tag to modify an element (e.g., `id=\"main\"`).\n  * **Element** \u2013 A complete HTML structure, typically including an opening tag, content, and a closing tag.\n\n\n## HTML Tags for Text Content\n  * `<p>` \u2013 Paragraph\n  * `<span>` \u2013 Inline container for text\n  * `<div>` \u2013 Generic container (block-level element)\n  * `<a>` \u2013 Anchor (hyperlink)\n  * `<img>` \u2013 Image\n  * `<br>` \u2013 Line break\n  * `<hr>` \u2013 Horizontal rule\n  * `<b>` \u2013 Bold text\n  * `<i>` \u2013 Italic text\n  * `<u>` \u2013 Underlined text\n  * `<strong>` \u2013 Strong importance (semantically bold)\n  * `<em>` \u2013 Emphasized text (typically italicized)\n  * `<code>` \u2013 Code snippet\n  * `<pre>` \u2013 Preformatted text\n\n\n## HTML Tags for Lists\n  * `<ul>` \u2013 Unordered list\n  * `<ol>` \u2013 Ordered list\n  * `<li>` \u2013 List item\n\n\n## HTML Tags for Tables\n  * `<table>` \u2013 Table container\n  * `<tr>` \u2013 Table row\n  * `<td>` \u2013 Table cell\n\n\n## HTML Tags for Forms\n  * `<form>` \u2013 Form container\n  * `<input>` \u2013 Input field\n  * `<textarea>` \u2013 Multi-line text input\n  * `<select>` \u2013 Drop-down list\n  * `<option>` \u2013 Option within a drop-down\n  * `<button>` \u2013 Button\n\n\n## HTML Tags for Media\n  * `<img>` \u2013 Image element\n  * `<source>` \u2013 Media resource (used within `<picture>` or `<video>`)\n  * `<picture>` \u2013 Container for multiple image sources\n  * `<video>` \u2013 Video element\n  * `<audio>` \u2013 Audio element\n\n\n## HTML Tags for Linking and Metadata\n  * `<link>` \u2013 Links external resources (e.g., CSS files, favicons)\n  * `<meta>` \u2013 Provides metadata about the document\n  * `<script>` \u2013 Embeds or references executable scripts\n\n\n### Script Tag Variations\n  * `<script src=\"script.js\"></script>` \u2013 External script\n  * `<script async src=\"script.js\"></script>` \u2013 Asynchronously loaded script\n  * `<script defer src=\"script.js\"></script>` \u2013 Deferred script execution\n  * `<script type=\"module\" src=\"script.js\"></script>` \u2013 JavaScript module\n\n\n## HTML Tags for Semantic and Meta Content\nModern HTML (HTML5) introduces several semantic tags that enhance the meaning and structure of your document:\n  * `<header>` \u2013 Defines a header for a document or section\n  * `<footer>` \u2013 Defines a footer for a document or section\n  * `<nav>` \u2013 Defines navigation links\n  * `<main>` \u2013 Specifies the main content of a document\n  * `<article>` \u2013 Encloses self-contained content\n  * `<section>` \u2013 Groups related content together\n  * `<aside>` \u2013 Represents content aside from the main content\n  * `<details>` \u2013 Defines additional details the user can view or hide\n  * `<summary>` \u2013 Provides a summary for the `<details>` element\n  * `<time>` \u2013 Represents a specific period in time\n\n\nAdditionally, standard meta tags include:\n  * `<meta charset=\"utf-8\">` \u2013 Sets the character encoding\n  * `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">` \u2013 Ensures responsiveness\n  * `<meta name=\"description\" content=\"Description\">` \u2013 Provides a page description\n  * `<meta name=\"author\" content=\"Author\">` \u2013 Identifies the author\n  * `<meta name=\"keywords\" content=\"Keywords\">` \u2013 Supplies SEO keywords\n  * `<meta name=\"robots\" content=\"index, follow\">` \u2013 Guides search engine indexing\n  * `<meta name=\"googlebot\" content=\"index, follow\">` \u2013 Specific for Googlebot\n\n\n## Attributes for HTML Tags\nAttributes provide additional information for HTML elements. Here are some common examples:\n```\n\n<pid=\"my-id\"class=\"my-class\">Hello World</p>\n<imgsrc=\"image.jpg\"alt=\"Descriptive image text\">\n<ahref=\"https://www.google.com\">Visit Google</a>\n<inputtype=\"text\"placeholder=\"Enter your name\">\n<button>Click me</button>\n\n```\n\n  * `id=\"my-id\"` - Adds an `id` attribute with the value `my-id`\n  * `.my-class` - Adds a `class` attribute with the value `my-class`\n  * `src=\"image.jpg\"` - Adds a `src` attribute with the value `image.jpg`\n  * `alt=\"Image\"` - Adds an `alt` attribute with the value `Image`\n  * `href=\"https://www.google.com\"` - Adds a `href` attribute with the value `https://www.google.com`\n  * `type=\"text\"` - Adds a `type` attribute with the value `text`\n  * `placeholder=\"Enter your name\"` - Adds a `placeholder` attribute with the value `Enter your name`\n\n\nSome attributes are global attributes and can be used on any HTML tag. Some attributes are specific to certain tags and can only be used with that tag. For example, the `href` attribute is a specific attribute for the `<a>` tag, and the `title` attribute is a global attribute that can be used on any HTML tag.\n### HTML5 attributes\nSome examples of HTML5 attributes are:\n  * `autofocus` - Adds an `autofocus` attribute to an input field\n  * `required` - Adds a `required` attribute to an input field\n  * `readonly` - Adds a `readonly` attribute to an input field\n  * `section` - Adds a `section` attribute to a section element\n  * `footer` - Adds a `footer` attribute to a footer element\n\n\n> footer, section, and header are new HTML5 attributes. They are used to define the structure of a web page. Fundamentally, they are used to group related content together, just like the `<div>` tag is used to group related content together.\n## HTML5 tags\n  * `<header>` - Header\n  * `<footer>` - Footer\n  * `<nav>` - Navigation\n  * `<main>` - Main\n  * `<article>` - Article\n  * `<section>` - Section\n  * `<aside>` - Aside\n  * `<details>` - Details\n  * `<summary>` - Summary\n  * `<time>` - Time\n  * `<mark>` - Mark\n  * `<meter>` - Meter\n  * `<progress>` - Progress\n  * `<video>` - Video\n  * `<audio>` - Audio\n  * `<source>` - Source\n\n\n## Conclusion\nYou don\u2019t need to do a PhD in HTML to be a web developer. You just need to know the basics and get out of here ASAP. HTML5 just adds a few new tags and attributes to HTML. Rest all the stuff like Web APIs (local storage, session storage, etc.) are just JavaScript stuff. You can learn them later.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousEmmet Crash Course](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/)[Next Welcome](https://docs.chaicode.com/youtube/chai-aur-git/welcome/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-html/introduction/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#_top)\n  * [ What is HTML? ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#what-is-html)\n  * [ What is HTML5? ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#what-is-html5)\n  * [ How much HTML should you learn? ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#how-much-html-should-you-learn)\n  * [ Text/Code Editor vs. Word Processor ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#textcode-editor-vs-word-processor)\n  * [ Recommended Code Editors ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#recommended-code-editors)\n  * [ Essential VS Code Extensions for HTML ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#essential-vs-code-extensions-for-html)\n  * [ Emmet for HTML Productivity ](https://docs.chaicode.com/youtube/chai-aur-html/introduction/#emmet-for-html-productivity)\n\n\n# Introduction to HTML\nHTML is the foundation of all websites. In this guide, you\u2019ll understand the essentials of HTML and get started with web development.\n## What is HTML?\nHTML stands for **HyperText Markup Language**. It\u2019s the standard markup language for creating and structuring web pages. HTML defines the structure and content of your web page, such as headings, paragraphs, images, and links.\n## What is HTML5?\n**HTML5** is the latest version of HTML. It introduces new tags, attributes, and features, making it simpler and more efficient to build modern, interactive web pages. HTML5 is also designed to be fully backward compatible with previous HTML versions.\n## How much HTML should you learn?\nYou only need the basics of HTML to start creating websites. Typically, mastering HTML essentials should not take more than a weekend. Understand the core tags and structure, and you\u2019re all set to build web pages effectively.\n## Text/Code Editor vs. Word Processor\n  * **Text editors** are specialized tools for writing and editing plain text files, including source code. They include essential features for coding such as syntax highlighting, auto-completion, and code formatting.\n  * **Word processors** like Microsoft Word or Google Docs are ideal for creating formatted documents such as letters, reports, or presentations\u2014but they\u2019re not suitable for coding.\n\n\nFor HTML development, always use a **code editor**.\n## Recommended Code Editors\nHere are some recommended code editors for writing HTML efficiently:\n  * [Visual Studio Code](https://code.visualstudio.com/) \u2013 Powerful, widely-used, and beginner-friendly.\n  * [Zed](https://zed.dev/) \u2013 Fast and collaborative editor for modern development.\n  * **VIM** \u2013 Highly customizable and efficient (but notoriously tricky to exit!).\n  * **Helix** \u2013 Similar to VIM, but easier to use right out of the box.\n\n\n## Essential VS Code Extensions for HTML\nEnhance your HTML coding experience with these recommended VS Code extensions:\n  * **HTML Snippets** \u2013 Quickly insert common HTML structures.\n  * **Live Server** \u2013 Automatically refreshes your browser as you edit your HTML.\n\n\n## Emmet for HTML Productivity\nEmmet is built-in with VS Code and allows you to rapidly generate HTML code using short abbreviations. This significantly speeds up your coding workflow. No need to manually type lengthy tags\u2014let Emmet handle it for you.\nSpend some time getting familiar with Emmet shortcuts to greatly improve your productivity. Learn more about Emmet at the [official website](https://emmet.io/).\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousWelcome](https://docs.chaicode.com/youtube/chai-aur-html/welcome/)[Next Emmet Crash Course](https://docs.chaicode.com/youtube/chai-aur-html/emmit-crash-course/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-html/welcome/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-html/welcome/#_top)\n\n\n# Welcome\nHaanji! Swagat hai **Chai aur Docs** mein. \ud83c\udf89\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Chai aur HTML** \u201d series on the [Chai aur Code](https://www.youtube.com/@chaiaurcode) YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nPlay\nLet\u2019s begin with the basics in the next section\u2026\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 14, 2025\n[ PreviousGetting Started](https://docs.chaicode.com/youtube/getting-started/)[Next HTML Intro](https://docs.chaicode.com/youtube/chai-aur-html/introduction/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/#_top)\n  * [ Client Requirements: ](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/#client-requirements)\n  * [ SQL Solution: ](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/#sql-solution)\n  * [ Additional Resources: ](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/#additional-resources)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/#summary)\n\n\n# Database Design Exercise\nIn this exercise, we\u2019ll explore practical database design using a real-world scenario. We\u2019ll learn how to structure and manage data effectively by implementing a database solution for a chai store business.\n## Client Requirements:\nYou\u2019ve been approached by a client who runs a small chai store and wants to set up a simple database to manage their chai offerings. The client has provided the following requirements:\n  1. **Database Setup:** Create a new database named `chai_store_db` for managing chai products.\n  2. **Chai Table:** Create a table called `chai_store` with the following columns:\n     * `id`: A unique identifier for each chai (auto-incrementing).\n     * `chai_name`: The name of the chai (e.g., \u201cMasala Chai\u201d, \u201cGreen Chai\u201d).\n     * `price`: The price of each chai.\n     * `chai_type`: Type of chai (e.g., \u201cSpiced\u201d, \u201cHerbal\u201d, \u201cCold\u201d).\n     * `available`: Boolean value indicating if the chai is currently available or not.\n  3. **Initial Data Insertion:** The client provides a list of their chai offerings and wants you to insert the following data:\n     * Masala Chai - \u20b930 - Spiced - Available\n     * Green Chai - \u20b925 - Herbal - Available\n     * Black Chai - \u20b920 - Classic - Available\n     * Iced Chai - \u20b935 - Cold - Not Available\n     * Oolong Chai - \u20b940 - Specialty - Available\n  4. **Data Queries:** The client needs some reports:\n    1. Display all chai names and prices, using column aliases like \u201cChai Name\u201d and \u201cCost in INR\u201d.\n    2. Find all chai varieties that have the word \u201cChai\u201d in their name.\n    3. List all chai varieties that cost less than \u20b930.\n    4. Show chai varieties sorted by price from highest to lowest.\n  5. **Data Updates:** The client wants to update the price of \u201cIced Chai\u201d to \u20b938 and mark it as available.\n  6. **Data Deletions:** The client decides to discontinue \u201cBlack Chai\u201d and requests its removal from the database.\n\n\n## SQL Solution:\n  1. Create a new Database for the chai store:\n```\n\nCREATEDATABASEchai_store_db;\n\n```\n\n  2. Create a new table for the chai store:\n```\n\nCREATETABLEchai_store (\nid SERIALPRIMARY KEY,\nchai_name VARCHAR(100) NOT NULL,\nprice DECIMAL(5, 2) NOT NULL,\nchai_type VARCHAR(100) NOT NULL,\navailable BOOLEANNOT NULL\n);\n\n```\n\n  3. Insert the initial data into the chai store table:\n```\n\nINSERT INTO chai_store (chai_name, price, chai_type, available)\nVALUES ('Masala Chai', 30, 'Spiced', TRUE),\n('Green Chai', 25, 'Herbal', TRUE),\n('Black Chai', 20, 'Classic', TRUE),\n('Iced Chai', 35, 'Cold', FALSE),\n('Oolong Chai', 40, 'Specialty', TRUE);\n\n```\n\n  4. Display all chai names and prices, using column aliases:\n```\n\nSELECT chai_name AS\"Chai Name\", price AS\"Cost in INR\"\nFROM chai_store;\n\n```\n\n  5. Find all chai varieties that have the word \u201cChai\u201d in their name:\n```\n\nSELECT*FROM chai_store\nWHERE chai_name LIKE'%Chai%';\n\n```\n\n  6. List all chai varieties that cost less than \u20b930:\n```\n\nSELECT*FROM chai_store\nWHERE price <30;\n\n```\n\n  7. Show chai varieties sorted by price from highest to lowest:\n```\n\nSELECT*FROM chai_store\nORDER BY price DESC;\n\n```\n\n  8. Update the price of \u201cIced Chai\u201d to \u20b938 and mark it as available:\n```\n\nUPDATE chai_store\nSET price =38, available = TRUE\nWHERE chai_name ='Iced Chai';\n\n```\n\n  9. Delete \u201cBlack Chai\u201d from the database:\n```\n\nDELETEFROM chai_store\nWHERE chai_name ='Black Chai';\n\n```\n\n\n\n## Additional Resources:\nTo delete entire table:\n```\n\nDROPTABLE chai_store;\n\n```\n\nAlso, you can use the `TRUNCATE` command to delete all rows from a table:\n```\n\nTRUNCATETABLE chai_store;\n\n```\n\nMost of the time you will see that `DROP` command is used with `IF Exists` clause to avoid accidental errors:\n```\n\nDROPTABLEIFEXISTS chai_store;\n\n```\n\n## Summary\nIn this chapter, we have learned about the basics of SQL and how to use it to manage and manipulate relational databases. We have also learned about the different types of relationships in SQL and how to use them.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 19, 2025\n[ PreviousDatabase Design](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/)[Next SQL Joins and Keys](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/introduction/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/introduction/#_top)\n  * [ What is PostgreSQL? ](https://docs.chaicode.com/youtube/chai-aur-sql/introduction/#what-is-postgresql)\n  * [ Relational Database Concepts ](https://docs.chaicode.com/youtube/chai-aur-sql/introduction/#relational-database-concepts)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-sql/introduction/#summary)\n\n\n# Introduction to SQL\nSQL (Structured Query Language) is a standardized language used to manage and manipulate relational databases. SQL allows you to:\n  * **Query Data** : Retrieve specific information from large datasets.\n  * **Insert Data** : Add new records to the database.\n  * **Update Data** : Modify existing data.\n  * **Delete Data** : Remove records from the database. \nReal World Example \nImagine you own a chai business with stores in multiple cities. You want to store information about different chai varieties, their ingredients, prices, and the cities where they\u2019re sold. SQL helps you manage and retrieve this information efficiently.\n\n\n## What is PostgreSQL?\nPostgreSQL is an open-source, powerful relational database management system (RDBMS) that supports advanced SQL features. It is known for:\n  * **ACID compliance** : Ensures reliable transactions (Atomicity, Consistency, Isolation, Durability).\n  * **Support for JSON and Array data types**.\n  * **Extensibility** : Custom functions, data types, etc. \nReal World Example \nYou can use PostgreSQL to store chai data across cities and perform complex queries like \u201cWhich city sells the most varieties of chai?\u201d\n\n\n## Relational Database Concepts\n  * **Tables** : A table is like a spreadsheet where data is organized into rows and columns.\n  * **Rows** : Each row represents a single record.\n  * **Columns** : Each column represents a specific attribute of the data.\n\n\n**Example** : A `Chai` table with the following columns: `id`, `name`, `ingredients`, `price`, `city_sold`.\n```\n\n...\n| id | name     | ingredients      | price | city_sold |\n|-----|--------------|------------------------|-------|-----------|\n| 1  | Masala Chai | Tea, Milk, Spices   | 50  | Mumbai  |\n| 2  | Assam Chai  | Assam Tea, Milk, Sugar | 40  | Delhi   |\n...\n\n```\n\n## Summary\nIn this chapter we have learned about SQL and PostgreSQL. We have also learned about relational databases and their concepts. By the end of this chapter, you should have a good understanding of SQL and how it can be used to manage and manipulate relational databases.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 19, 2025\n[ PreviousWelcome](https://docs.chaicode.com/youtube/chai-aur-sql/welcome/)[Next PostgreSQL](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#_top)\n  * [ Types of Joins ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#types-of-joins)\n    * [ Inner Join ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#inner-join)\n    * [ Left Join ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#left-join)\n    * [ Right Join ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#right-join)\n    * [ Full Join ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#full-join)\n    * [ Cross Join ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#cross-join)\n  * [ Keys in SQL ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#keys-in-sql)\n    * [ Primary Key ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#primary-key)\n    * [ Foreign Key ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#foreign-key)\n    * [ Practical Example: Chai Store Database ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#practical-example-chai-store-database)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/#summary)\n\n\n# SQL Joins and Keys\nIn relational databases, **joins** are used to combine rows from two or more tables based on a related column between them. There are several types of joins, each designed for specific purposes. Joins are a way to combine data from multiple tables to create a single result set.\n## Types of Joins\nThere are several types of joins, each designed for specific purposes. Here are some common types of joins:\n### Inner Join\n  * Used to combine rows from two tables based on a related column between them. It returns only the rows that have matching values in both tables.\n  * Only rows that have matching values in both tables are returned.\n\n\n### Left Join\n  * Used to combine rows from two tables based on a related column between them. It returns all rows from the left table, and the matching rows from the right table.\n  * If there are no matching rows in the right table, NULL values are returned for the columns from the right table.\n\n\n### Right Join\n  * Used to combine rows from two tables based on a related column between them. It returns all rows from the right table, and the matching rows from the left table.\n  * If there are no matching rows in the left table, NULL values are returned for the columns from the left table.\n\n\n### Full Join\n  * Used to combine rows from two tables based on a related column between them. It returns all rows from both tables, and the matching rows from both tables.\n  * If there are no matching rows in either table, NULL values are returned for the columns from the other table.\n\n\n### Cross Join\n  * Used to combine rows from two tables based on a related column between them. It returns all possible combinations of rows from both tables.\n  * If there are no matching rows in either table, NULL values are returned for the columns from the other table.\n\n\n## Keys in SQL\nIn SQL, keys are crucial for organizing and relating data between tables. There are two main types of keys:\n### Primary Key\n  * A column or set of columns that uniquely identifies each row in a table\n  * Must contain unique values and cannot be null\n  * Only one primary key per table\n  * Example: customer_id, order_id, product_id\n\n\n### Foreign Key\n  * A column that creates a relationship between two tables\n  * References the primary key of another table\n  * Can have multiple foreign keys in a table\n  * Maintains referential integrity between tables\n  * Example: customer_id in orders table referencing customers table\n\n\nTip \nLet\u2019s understand primary and foreign keys through a practical example of a chai store database.\n### Practical Example: Chai Store Database\nWe\u2019ll create four interconnected tables to demonstrate how keys work in a real scenario:\n#### customers table\nThe `customers` table stores information about each customer.\n```\n\nCREATETABLEcustomers (\ncustomer_id SERIALPRIMARY KEY,\ncustomer_name VARCHAR(50),\ncontact_info VARCHAR(100)\n);\n\n```\n\nLet\u2019s add some sample data to the chai_store table:\n```\n\nINSERT INTO chai_store (chai_name, price, chai_type)\nVALUES ('Masala Chai', 30.00, 'Spiced'),\n('Green Chai', 25.00, 'Herbal'),\n('Black Chai', 20.00, 'Classic'),\n('Iced Chai', 35.00, 'Cold'),\n('Oolong Chai', 40.00, 'Specialty');\n\n```\n\n#### chai_store table\nThe `chai_store` table stores information about the chai available in the store.\n```\n\nCREATETABLEchai_store (\nchai_id SERIALPRIMARY KEY,\nchai_name VARCHAR(50),\nprice DECIMAL(5, 2),\nchai_type VARCHAR(50)\n);\n\n```\n\nLet\u2019s add some sample data to the chai_store table:\n```\n\nINSERT INTO chai_store (chai_name, price, chai_type)\nVALUES ('Masala Chai', 30.00, 'Spiced'),\n('Green Chai', 25.00, 'Herbal'),\n('Black Chai', 20.00, 'Classic'),\n('Iced Chai', 35.00, 'Cold'),\n('Oolong Chai', 40.00, 'Specialty');\n\n```\n\n#### orders table\nThe `orders` table stores information about each order placed by customers.\n```\n\nCREATETABLEorders (\norder_id SERIALPRIMARY KEY,\ncustomer_id INT,\norder_date DATE,\nFOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n```\n\nLet\u2019s add some sample data to the orders table:\n```\n\nINSERT INTO orders (customer_id, order_date)\nVALUES (1, '2024-09-19'),\n(2, '2024-09-18'),\n(1, '2024-09-20'),\n(4, '2024-09-17');\n\n```\n\n#### order_items table\nThe `order_items` table stores information about each item in each order.\n```\n\nCREATETABLEorder_items (\norder_item_id SERIALPRIMARY KEY,\norder_id INT,\nchai_id INT,\nquantity INT,\nprice DECIMAL(5, 2),\nFOREIGN KEY (order_id) REFERENCES orders(order_id),\nFOREIGN KEY (chai_id) REFERENCES chai_store(chai_id)\n);\n\n```\n\nLet\u2019s add some sample data to the order_items table:\n```\n\nINSERT INTO order_items (order_id, chai_id, quantity, price)\nVALUES (1, 1, 2, 30.00),\n(1, 2, 1, 25.00),\n(2, 3, 2, 20.00),\n(3, 1, 1, 30.00),\n(4, 5, 3, 40.00);\n\n```\n\nThis is our sample setup for the chai store database. This consists of four tables: customers , chai_store , orders , and order_items . Tables are storing data about customers, chai varieties, orders, and the items in each order. Tables are linked together using foreign keys.\nPrimary keys are used to uniquely identify each row in a table. Foreign keys are used to establish relationships between tables. Foreign keys are used to link tables based on a related column between them.\n## Summary\nIn this chapter, we have learned about the basics of SQL Joins. Also we have learned about Primary Key and Foreign Key.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 19, 2025\n[ PreviousExercise - DB Design](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/)[Next Exercise - Joins](https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/#_top)\n  * [ Create 2 tables for a chai store ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/#create-2-tables-for-a-chai-store)\n  * [ Challenges ](https://docs.chaicode.com/youtube/chai-aur-sql/joins-exercise/#challenges)\n\n\n# SQL Joins Exercise\nIn this exercise, we\u2019ll explore practical sql joins using a real-world scenario. We\u2019ll learn how to use joins to combine data from multiple tables.\n## Create 2 tables for a chai store\nWe will create 2 tables for a chai store so that we can practice joins. The tables will be:\n#### chai table\n```\n\nCREATETABLEchai (\nchai_id SERIALPRIMARY KEY,\nchai_name VARCHAR(50),\nprice DECIMAL(5, 2)\n);\n\n```\n\nLet\u2019s add some sample data to the chai table:\n```\n\nINSERT INTO chai (chai_name, price)\nVALUES ('Masala Chai', 30.00),\n('Green Chai', 25.00),\n('Iced Chai', 35.00);\n\n```\n\n#### orders table\n```\n\nCREATETABLEorders (\norder_id SERIALPRIMARY KEY,\nchai_id INT,\ncustomer_name VARCHAR(50),\nquantity INT,\nFOREIGN KEY (chai_id) REFERENCES chai(chai_id)\n);\n\n```\n\nLet\u2019s add some sample data to the orders table:\n```\n\nINSERT INTO orders (chai_id, customer_name, quantity)\nVALUES (1, 'Alice', 2),\n(2, 'Bob', 1),\n(1, 'Charlie', 3),\n(3, 'David', 1);\n\n```\n\n## Challenges\nNow, let\u2019s try to solve some challenges using joins.\n  1. **Inner Join** Get the list of all orders with the chai variety and customer details.\n  2. **Left Join** Show all customers and their orders, but also include customers who haven\u2019t ordered anything yet (if any).\n  3. **Right Join** Show all chai varieties, including those that haven\u2019t been ordered yet.\n  4. **Full Outer Join** List all customers and all chai varieties, with or without orders.\n\n\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 19, 2025\n[ PreviousSQL Joins and Keys](https://docs.chaicode.com/youtube/chai-aur-sql/joins-and-keys/)[Next Welcome](https://docs.chaicode.com/youtube/chai-aur-devops/welcome/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/normalization/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#_top)\n  * [ Understanding Database Design Principles ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#understanding-database-design-principles)\n  * [ What is Normalization? ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#what-is-normalization)\n    * [ First Normal Form (1NF) ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#first-normal-form-1nf)\n    * [ Second Normal Form (2NF) ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#second-normal-form-2nf)\n    * [ Third Normal Form (3NF) ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#third-normal-form-3nf)\n  * [ Entity Relationship Diagrams (ERDs) ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#entity-relationship-diagrams-erds)\n  * [ Relationship in SQL ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#relationship-in-sql)\n  * [ LMS practice Exercise ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#lms-practice-exercise)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/#summary)\n\n\n# Normalization\nDatabase design is the process of creating a logical structure for storing data in a database. It involves defining the relationships between tables, identifying the primary and foreign keys, and ensuring that the data is normalized to minimize redundancy and improve data integrity.\n## Understanding Database Design Principles\n  * Good database design avoids **data redundancy** and ensures data **integrity**.\n  * **Example** : Instead of storing the city name in every row for each chai type, store city details in a separate `Cities` table and link it with the `Chai` table using foreign keys.\n\n\n## What is Normalization?\nNormalization organizes a database into tables and columns to:\n  * Eliminate data redundancy.\n  * Ensure data dependencies are logical.\n\n\n### First Normal Form (1NF)\n  * 1NF ensures that the data in a table is organized into rows and columns, with each column holding atomic (indivisible) values.\n  * **Example** : A `Chai` table should have columns like `name`, `ingredients`, `price`, and each cell should contain a single value. You shouldn\u2019t have multiple cities listed in one cell.\n\n\n### Second Normal Form (2NF)\n  * 2NF ensures that each table depends on the primary key. There should be no partial dependencies (where a non-key column depends on part of a composite key).\n  * **Example** : If a table has a composite key (`chai_id`, `city_id`), ensure all non-key columns (like `price`) depend on the entire key, not just one part.\n\n\n### Third Normal Form (3NF)\n  * 3NF ensures that non-primary-key columns do not depend on other non-primary-key columns.\n  * **Example** : A `Chai` table shouldn\u2019t have both `city_name` and `city_population`. Instead, `city_name` and `city_population` should belong in a separate `City` table, and you can link it to the `Chai` table with a `city_id`.\n\n\n## Entity Relationship Diagrams (ERDs)\nERDs are used to visually represent relationships between database entities.\n  * **Example** : You might have two tables: `Chai` and `City`. An ERD would show a one-to-many relationship between cities and chai varieties.\n  * **One-to-Many Relationship** : One city can have many chai varieties, but each chai variety is sold in one city.\n\n\n## Relationship in SQL\nThere are different types of relationships in SQL:\n  * One-to-One Relationship: One entity can have only one instance of another entity.\n  * One-to-Many Relationship: One entity can have multiple instances of another entity.\n  * Many-to-Many Relationship: One entity can have multiple instances of another entity, and vice versa.\n\n\n## LMS practice Exercise\nWe will create a fun practice database design for Learning Management System (LMS) using SQL. The LMS will have the following entities:\n  * Users\n  * Courses\n  * Videos\n  * Enrollments\n\n\n```\n\nusers [icon:user] {\n_id string pk\nname string\nemail string unique\npassword string\nuserType enum \"student\", \"instructor\", \"admin\"\nisPaid boolean\nenrolledCourses ObjectId[] courses\ncreatedAt Date\nupdatedAt Date\n}\ncourses [icon:book] {\n_id string pk\ntitle string\ndescription string\nprice number\ninstructorId ObjectId users\ncategory string\ntags string[]\ndurationInHours number\nvideos ObjectId[] videos\ncreatedAt Date\nupdatedAt Date\n}\nvideos [icon:video] {\n_id string pk\ncourseId ObjectId courses\ntitle string\ndescription string\nurl string\ndurationInMinutes number\ncreatedAt Date\nupdatedAt Date\n}\nenrollments [icon:user] {\n_id string pk\nuserId ObjectId users\ncourseId ObjectId courses\nenrollmentDate Date\nprogress number\ncompletedAt Date\ncreatedAt Date\nupdatedAt Date\n}\nusers._id < enrollments.userId\nenrollments.userId > users._id\ncourses._id < enrollments.courseId\nenrollments.courseId > courses._id\ncourses._id < videos.courseId\nvideos.courseId > courses._id\nusers._id < courses.instructorId\ncourses.instructorId > users._id\n\n```\n\n## Summary\nIn this chapter, we have learned about database design and normalization. We have also learned about the basic data types and how to use them. We have also learned about the different types of relationships and how to use them.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 19, 2025\n[ PreviousPostgreSQL](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/)[Next Exercise - DB Design](https://docs.chaicode.com/youtube/chai-aur-sql/database-design-exercise/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/postgres/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/#_top)\n  * [ Installing PostgreSQL ](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/#installing-postgresql)\n  * [ Setting up a PostgreSQL ](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/#setting-up-a-postgresql)\n  * [ pgAdmin as GUI ](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/#pgadmin-as-gui)\n  * [ Summary ](https://docs.chaicode.com/youtube/chai-aur-sql/postgres/#summary)\n\n\n# PostgreSQL\nPostgreSQL is a powerful, open-source relational database management system (RDBMS) that is widely used for storing and managing large amounts of structured data. It is known for its robustness, scalability, and support for complex queries and transactions.\n## Installing PostgreSQL\nTo install PostgreSQL, on:\n  1. **Windows** : Download the PostgreSQL installer from the [official site](https://www.postgresql.org/download/windows/).\n  2. **Mac** : \nTerminal window```\n\n# Use Homebrew\nbrewinstallpostgresql\n\n```\n\n  3. **Linux** : \nTerminal window```\n\n# Use the official PostgreSQL installer.\nsudoaptinstallpostgresql\n\n```\n\n  4. **Docker** : Use the official PostgreSQL [Docker image](https://hub.docker.com/_/postgres).\n\n\n## Setting up a PostgreSQL\nTo set up a PostgreSQL database, follow these steps:\n  1. **Start the PostgreSQL Service**\nStart the PostgreSQL service to ensure it\u2019s running on your system:\nTerminal window```\n\nsudoservicepostgresqlstart\n\n```\n\n  2. **Create a Database**\ncreate a new database for your chai and city date:\nTerminal window```\n\ncreatedbchai_and_city\n\n```\n\nthis creates a new database called `chai_and_city` in postgresql.\n  3. **Connecting to the Database**\nConnecting to your newly created database using PostgreSQL command line interface:\nTerminal window```\n\npsql-dchai_and_city\n\n```\n\nthis will prompt you to enter your password. Enter your password. Here -d is a flag that specifies the database you want to connect to.\n\n\n## pgAdmin as GUI\n**pgAdmin** is a graphical interface for managing **PostgreSQL** databases. Follow these steps to connect and manage your database using pgAdmin:\n  * **Download and Install pgAdmin** : Go to the official pgAdmin website and install it for your [operating system](https://www.pgadmin.org/download/).\n  * **Connect to your local PostgreSQL Server** : Open pgAdmin and create a new server connection. For the host name, use localhost and enter your PostgreSQL username and password.\n  * **Create a Database:** Right-click on your server in pgAdmin, select \u201cCreate,\u201d and choose \u201cDatabase.\u201d Name the database chai_and_cities.\n  * **Manage Data Visually:** You can now use pgAdmin\u2019s graphical interface to create tables, insert data, and run queries\n\n\n## Summary\nIn this chapter, we learned how to install **PostgreSQL** and set up a database. We also learned how to connect to the database using PostgreSQL command line interface and **pgAdmin**.\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 19, 2025\n[ PreviousSQL Intro](https://docs.chaicode.com/youtube/chai-aur-sql/introduction/)[Next Database Design](https://docs.chaicode.com/youtube/chai-aur-sql/normalization/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/chai-aur-sql/welcome/": "* [ Overview ](https://docs.chaicode.com/youtube/chai-aur-sql/welcome/#_top)\n\n\n# Welcome\nHaanji! Swagat hai **Chai aur Docs** mein. \ud83c\udf89\nThis guide has been carefully curated as a comprehensive reference for the \u201c**Master SQL for Web Development** \u201d section in the [Complete Web Dev Course on Udemy](https://www.udemy.com/course/web-dev-master/) course. For the best learning experience, we recommend following these docs alongside our video lectures.\n[![udemy](https://docs.chaicode.com/_astro/udemy.CjCrqgZ__aWzih.webp)](https://hitesh.ai/udemy)\nLet\u2019s begin with the basics in the next section\u2026\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Choudhary](https://hitesh.ai)\nLast updated: Apr 22, 2025\n[ PreviousRelationships & Forms](https://docs.chaicode.com/youtube/chai-aur-django/relationships-and-forms/)[Next SQL Intro](https://docs.chaicode.com/youtube/chai-aur-sql/introduction/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)",
    "https://docs.chaicode.com/youtube/getting-started/": "* [ Overview ](https://docs.chaicode.com/youtube/getting-started/#_top)\n  * [ Maximize Your Learning ](https://docs.chaicode.com/youtube/getting-started/#maximize-your-learning)\n\n\n# Getting Started\nReading the docs is a great way to learn. Whether it\u2019s a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\n## Maximize Your Learning\n  1. **Read Actively:**\n     * Take Your Time: Don\u2019t rush through the content. Take the time to understand each section thoroughly.\n     * Highlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n  2. **Practice What You Learn**\n     * Hands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\n     * Build Projects: Apply what you\u2019ve learned by building small projects or components. This practical application is crucial for mastering new skills.\n  3. **Utilize Additional Resources**\n     * Cross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\n     * Ask Questions: Don\u2019t hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n  4. **Stay Organized**\n     * Bookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\n     * Use the Search Feature: Make use of the search functionality to quickly find specific information.\n  5. **Engage with the Community**\n     * Join Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\n     * Contribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n  6. By following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\n## Start your journey with ChaiCode\nAll of our courses are available on [chaicode.com](https://chaicode.com). Feel free to check them out. \nComplied by: [Hitesh Chaudhary](https://hitesh.ai)\nLast updated: Apr 22, 2025\n[Next Welcome](https://docs.chaicode.com/youtube/chai-aur-html/welcome/)\n[ Contribute ](https://docs.chaicode.com/contribute/guide) [ Community ](https://hitesh.ai/discord) [ Sponsor ](http://courses.chaicode.com/learn/Buy-me-a-tea)"
}